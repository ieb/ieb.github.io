{"total":77,"offset":0,"limit":77,"data":[{"path":"/developer/tutorial","title":"Getting Started with Franklin - Developer Tutorial","image":"/developer/media_165bab297e15a33f4742a4f20d8e0a3c3ba42511a.png?width=1200&format=pjpg&optimize=medium","description":"This tutorial will get you up-and-running with a new AEM Franklin project. In 10 - 20 minutes, you will have created your own site and ...","content":"Getting Started with Franklin - Developer Tutorial\n\nThis tutorial will get you up-and-running with a new AEM Franklin project. In 10 - 20 minutes, you will have created your own site and be able to create, preview, and publish your own content, styling, and add new blocks.\n\nPrerequisites:\n\nYou have a GitHub account, and understand Git basics. You have a Google account. You understand the basic HTML, CSS, and JavaScript. You have Node/npm installed for local development.\n\nThis tutorial uses macOS, Chrome, and Visual Studio Code as the development environment and the screenshots and instructions reflect that setup.\nOf course you can use a different operating system, browser, and code editor, but the UI you see and steps you must take may vary accordingly.\n\nGet Started with the Franklin Boilerplate Repository Template\nhttps://main--helix-website--adobe.hlx.page/media_1d6e3d8e0e465fb2c43cdcb4c6ba8123693c86117.mp4\n\nThe fastest and easiest way to get started following AEM Franklin best practices is to create your repo using the Franklin boilerplate GitHub repo as a template.\n\nhttps://github.com/adobe/helix-project-boilerplate\n\nJust click the Use this template button, and select where you want to create this repo.\n\nThe repo will be public by default, which is recommended.\n\nThe only remaining step in GitHub is to install the Franklin Bot on your repo by visiting this link: https://github.com/apps/helix-bot/installations/new\n\n\n\nIn the Repository access settings of the Franklin bot, make sure you select Only select Repositories (not All Repositories). Then select your newly created repo, and click Save.\n\nCongratulations! You have a new website running on https://<branch>--<repo>--<owner>.hlx.page/ In the above example that’s https://main--my-website--davidnuescheler.hlx.page/\n\n\n\n\nLink Your Own Content Source Using Google Drive\nhttps://main--helix-website--adobe.hlx.page/media_1b16be8d758ce2d392315a7c306767a62516fa831.mp4\n\nIn your fork of the Franklin boilerplate GitHub repo, the site points to an existing content source in Google Drive. See this folder for some example content.\n\n\nThis content is read-only, but it can be copied into your Google Drive folder to serve as a starting point.\n\nTo author your own content, create a folder in your own Google Drive and share the folder with the Franklin Bot (helix@adobe.com).\n\nA good way to start authoring your own content is to copy index, nav and footer from the sample content and familiarize yourself with the content structure. nav and footer are not changed frequently in a project and have a special structure. Most of the files in a Franklin project look more similar to index.\n\nOpen the files and copy/paste the entire content into corresponding files in your own Google Drive. You can also download the files via Download All or download individual files. However, remember to convert the downloaded .docx files back into native Google Docs, when you upload them to your folder in your Google Drive.\n\nNow that you have your content, you need to tell Franklin where to find that content. You do this by changing the reference in fstab.yaml in your GitHub repo to the folder you just shared.\nJust copy/paste the folder URL from your Google Drive to fstab.yaml.\n\nBe aware that after you make that change, you will see 404 not found errors as your content has not been previewed yet. Please refer to the next section to see how to start authoring and previewing your content. If you copied over index, nav and footer all three of those are separate documents with their own preview and publish cycles, so make sure you preview (and publish) all of them if needed.\n\nCommit your changes and you have hooked up your own content source to your website.\n\nPreview and Publish Your content\nhttps://main--helix-website--adobe.hlx.page/media_1d7b6d38cd4f0ad9b661887e3a24b44a72f7c945e.mp4\n\nAfter completing the last step, your new content source is not empty, but no content has been promoted to the preview or live stages, which means your website serves 404s.\n\nTo preview content, an author has to install the Sidekick Chrome extension. Find the Chrome extension here.\n\nAfter adding the extension to Chrome, don’t forget to pin it.\n\nTo setup the Chrome extension, go to your GitHub repo and click the extension icon in the browser toolbar and select Add project.\n\nAs soon as the extension is installed and your project is added, you are ready to preview and publish your content from your Google Drive. Open the index doc and activate the sidekick by clicking on your pinned extension and then click the Preview button which will trigger the preview operation and open a new tab with the preview rendition of the content.\n\nOn the preview page, you can press the Publish button which will trigger the publication of the content to the live environment and redirect you to the corresponding URL.\n\n\n\n\nThat’s it! You just published your first page with Franklin.\n\nLet’s make some changes and republish.\n\nTo complete the content of your site, perform the same process with the nav and footer documents. After that you should have a fully functional website with a header and a footer. All of the content is maintained and served by your own Google Drive.\n\nStart Developing Styling and Functionality\nhttps://main--helix-website--adobe.hlx.page/media_141a9484b704e5113383b6ee92e09dd0ac352944a.mp4\n\nTo get started with development, it is easiest to install the Franklin Command Line Interface (CLI) and clone your repo locally through using the following.\n\nnpm install -g @adobe/helix-cli\ngit clone https://github.com/<owner>/<repo>\n\n\n\n\nFrom there change into your project folder and start your local dev environment using the following.\n\ncd <repo>\nhlx up\n\n\n\n\nThis opens http://localhost:3000/ and you are ready to make changes.\nA good place to start is in the blocks folder which is where most of the styling and code lives for a Franklin project. Simply make a change in a .css or .js and you should see the changes in your browser immediately.\n\nOnce you are are ready to push your changes, simply use Git to add, commit, and push and your code to your preview (https://<branch>--<repo>--<owner>.hlx.page/) and production (https://<branch>--<repo>--<owner>.hlx.live/) sites.\n\nThat’s it, you made it! Congrats, your first Franklin site is up and running.","lastModified":"1678699145"},{"path":"/developer/anatomy-of-a-helix-project","title":"The Anatomy of a Franklin Project","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"This document describes how a typical Franklin project should look from a code standpoint. Before reading this document, please familiarize yourself with the document Getting ...","content":"The Anatomy of a Franklin Project\n\nThis document describes how a typical Franklin project should look from a code standpoint. Before reading this document, please familiarize yourself with the document Getting Started with Franklin - Developer Tutorial.\n\nGit and GitHub\n\nOne of the defining philosophies of Franklin is that it is easiest to allow users to work with the tools that they are familiar with. The overwhelming majority of developers manage their code in systems based on Git, so it only makes sense to allow developers to work with Git to manage and deploy their Franklin code.\n\nFranklin is a buildless system that runs directly from your GitHub repo. After installing the Franklin GitHub bot on your repo, websites are automatically created for each of your branches for content preview on https://<branch>--<repo>--<owner>.hlx.page/ and the production site on https://<branch>--<repo>--<owner>.hlx.live/ for published content.\n\nEvery resource that you put into your GitHub repo is available on your website, so a file in your GitHub repo on the main branch in /scripts/scripts.js will be available on https://main--<repo>--<owner>.hlx.page/scripts/scripts.js\nThis should be very intuitive. There are few “special” files that Franklin uses to connect the content into your website.\n\nWe strongly recommend that repos are kept public on GitHub, to foster the community. For a public facing website there really is no need to keep the code hidden, as it is being served to the browsers of your website.\n\nImportant notes:\n\nThe combination <branch>--<repo>--<owner> must not exceed 63 characters (including the hyphens/dashes). This is a subdomain name constraint. branch, repo and owner cannot contain --.\nFranklin Files\n\nThere are some files in your GitHub repo that have a special meaning to Franklin and are processed in a special fashion. These files are in the root directory of your repo.\n\nThe Content Connection: fstab.yaml\n\nAs you may have seen in the getting started guide the fstab.yaml file serves as the connection to your Google Drive or SharePoint folders that contain your content. This file is used as an indicator for how Franklin should combine the code in your GitHub repo with the content in your content source.\n\nBeyond providing the connection to the content, the fstab.yaml also provides a folder mapping facility that allows you map extensionless “routes” to a given piece of content or static HTML.\n\nThe Entry Point: head.html\n\nThe head.html file is the most important extension point to influence the markup of the content. The easiest way to think of it is that this file is injected on the server side as part of the <head> HTML tag and is combined with the metadata coming from the content.\n\nThe head.html should remain largely unchanged from the Franklin boilerplate and there are only very few legitimate reasons in a regular Franklin project to make changes. Those include remapping your Franklin project to a different base URL for the purposes of exposing your Franklin project in a different folder than the root folder of your domain on your CDN or to support legacy browsers which usually require scripts that are not loaded as modules.\n\nAdding the Adobe Web SDK, Google Tag Manager, scripts, or other marketing technology to your head.html file is strongly advised against due to performance impacts. See the section Scripts and Styles below for more information about handling scripts.\n\nPlease see the following examples.\n\nhttps://github.com/adobe/helix-project-boilerplate/blob/main/head.html https://github.com/adobe/express-website/blob/main/head.html https://github.com/adobe/business-website/blob/main/head.html\nNot Found: 404.html\n\nYou can create a custom 404 response payload by placing a 404.html file into the root of your repo. This will be served on any URL that doesn’t map to an existing piece of content or an existing piece of code.\n\n\nThe 404 can mimic the markup of an existing page including your code for the site, with navigation footers etc., or it can have a completely different appearance.\n\nPlease see the following examples.\n\nhttps://github.com/hlxsites/bamboohr-website/blob/main/404.html See in Action https://github.com/adobe/design-website/blob/main/404.html See in Action https://github.com/adobe/blog/blob/main/404.html See in Action\nDon’t Serve: .hlxignore\n\nThere are some files in your repo that should not be served from your website, either because you would like to keep them private or they are not relevant to the delivery of the website (e.g. tests, build tools, build artifacts, etc.) and don’t need to be observed by the Franklin bot. You can add those to a .hlxignore file in the same format as the well-known .gitignore file.\n\nPlease see the following example.\n\nhttps://github.com/adobe/helix-website/blob/main/.hlxignore\nTame the Bots: robots.txt\n\nA robots.txt file is generally a regular file that is served as you would expect on your production website on your own domain. To protect your preview and origin site from being indexed, your .page and .live sites will serve a robots.txt file that disallows all robots instead of the robots.txt file from your repo.\n\nPlease see the following examples.\n\nhttps://github.com/adobe/blog/blob/main/robots.txt https://github.com/adobe/pages/blob/main/robots.txt https://github.com/adobe/helix-website/blob/main/robots.txt\nQuery and Indexing: helix-query.yaml\n\nFranklin features a flexible indexing facility that lets you keep track of all of your content pages conveniently as a spreadsheet. This facility is often used to show lists or feeds of pages as well as to filter and sort content on a website. Please see the document Indexing for more information.\n\nPlease see the following examples.\n\nhttps://github.com/adobe/express-website/blob/main/helix-query.yaml https://github.com/adobe/design-website/blob/main/helix-query.yaml https://github.com/adobe/blog/blob/main/helix-query.yaml\nAutomate Your Sitemap: helix-sitemap.yaml\n\nFranklin automatically creates complex sitemaps for you whenever authors publish new content, including flexible hreflang mappings where needed. This functionality is usually based on the indexing facility.\nSee this GitHub issue for sitemap configuration options.\n\nPlease see the following examples.\n\nhttps://github.com/adobe/pages/blob/main/helix-sitemap.yaml https://github.com/adobe/fedpub/blob/main/helix-sitemap.yaml https://github.com/adobe/express-website/blob/main/helix-sitemap.yaml\nCommonly Used File and Folder Structure\n\nBeyond the files that Franklin treats as special or configuration files, there is a commonly-used structure that is expressed in the Franklin Boilerplate repo.\n\nThe common folders below are usually in the root directory of a Franklin project repo, but in cases where only a portion of a website is handled by Franklin, they are often moved to a subfolder to reflect the mapping of the route of the Franklin origin in a CDN.\n\nScripts and Styles\n\nBy convention in a Franklin project, the head.html references styles.css, scripts.js, and lib-franklin.js located in /scripts and /styles, as the entry points for the project code.\n\nscripts.js is where your global custom javascript code lives and is where the Franklin block loading code is triggered. styles.css hosts the global styling information for your site, and minimally contains the global layout information that is needed to display the Largest Contentful Paint (LCP).\n\nAs all three files are loaded before the page can be displayed, it is important that they are kept relatively small and executed efficiently.\n\nBeyond styles.css, a lazy-styles.css file is commonly used, which is loaded after the LCP event, and therefore can contain slower/more CSS information. This could be a good place for fonts or global CSS that is below the fold.\n\nIn addition to scripts.js, there is the commonly-used delayed.js. This is a catch-all for libraries that need to be loaded on a page but should be kept from interfering with the delivery of the page. This is a good place for code that is outside of the control of your Franklin project and usually includes the martech stack and other libraries.\n\nPlease see the document Keeping it 100, Web Performance with Franklin for more information about optimizing your site performance.\n\nBlocks\n\nMost of the project-specific CSS and JavaScript code lives in blocks. Authors create blocks in their documents. Developers then write the corresponding code that styles the blocks with CSS and/or decorates the DOM to take the Franklin markup of a block and transform it to the structure that’s needed or convenient for desired styling and functionality.\n\n\nThe block name is used as both the folder name of a block as well as the filename for the .css and .js files that are loaded by the Franklin block loader when a block is used on a page.\n\n\nThe block name is also used as the CSS class name on the block to allow for intuitive styling. The javascript is loaded as a module (ESM) and exports a default function that is executed as part of the block loading.\n\nA simple example is the Columns Block. It adds additional classes in JavaScript based on how many columns are in the respective instance created by the author. This allows it to be able to use flexible styling of content that is in two columns vs. three columns.\n\nIcons\n\nMost projects have SVG files that are usually added to the /icons folder, and can be referenced with a :<iconname>: notation by authors. By default, icons are inlined into the DOM so they can be styled with CSS, without having to create SVG symbols.","lastModified":"1677508769"},{"path":"/docs/go-live-checklist","title":"Franklin Go-Live Checklist","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"The Franklin go-live checklist is a summary of best practices to consider when launching a website. These steps are generally good practices but have some ...","content":"Franklin Go-Live Checklist\n\nThe Franklin go-live checklist is a summary of best practices to consider when launching a website. These steps are generally good practices but have some Franklin-specific aspects.\n\nSteps Before Go-Live\nContent and Design QA\n\nMake sure that your content and design conforms to the specifications and that you are happy with the website you see on your projects .hlx.live domain. This may include checks for specific accessibility and SEO requirements of your project.\n\nPerformance Validation\n\nEvery Franklin project should produce a lighthouse score of 100 for mobile and desktop from Google Pagespeed insights on its respective .hlx.live site.\n\nSee the document Keeping it 100, Web Performance with Franklin for more information.\n\nAnalytics Validation\n\nMake sure that all your analytics setup and the rest of your martech stack is firing as expected and visitor data is visible in your reporting dashboards.\n\nLegacy Redirects\n\nIn most migrations there are legacy URLs that are retired. Make sure those are reflected in your redirects spreadsheet (redirects.xlsx in sharepoint or redirects in google), found in your project content folder.\n\nSee the document Redirects for more information.\n\nSitemap & Robots\n\nFor most websites with a significant number of pages, a sitemap is desirable. Franklin automatically generates those from the query index.\n\nIf you have a sitemap that’s generated for your site make sure it is discoverable from your robots.txt. \n\n\nNote: hlx.page and hlx.live are kept hidden from crawlers intentionally, to avoid duplicate content.\n\nSee the documents Indexing and Sitemaps for more information.\n\nFavicon\n\nAdding a favicon to your site gives it a professional look in your visitor’s browsers.\n\nSee the document Favicon for more information.\n\nCDN Configuration\n\nOne of the last steps in a go-live is usually to update your CDN configuration (e.g. Cloudflare, Fastly, Akamai, Cloudfront) to point to your hlx.live endpoint.\n\nIdeally the CDN configuration is tested in a staging environment to make sure that everything works as expected.\n\nPlease see the following CDN setup documentation for more information.\n\nCloudflare Worker Setup Guide Akamai Setup Guide Cloudfront Setup Guide Fastly Setup Guide\nPush Invalidation Setup\n\nMake sure push invalidation is properly set up according to the document Configuring Push Invalidation for BYO Production CDN. Test the setup by publishing a small change and verifying that the change is visible on the production domain.\n\nUpdate Production Host\n\nAfter setting up your production CDN, add the host property to the sidekick configuration in /tools/sidekick/config.json in your github repo, to allow your authors to navigate directly from the production domain to edit directly from the sidekick.\n\nSee the document Sidekick Configuration for more information.\n\nPost Go-Live Validation\nPerformance Validation\n\nValidate that the performance is still at a lighthouse score of 100 via pagespeed insights on the production environment. Introducing a CDN layer can have adverse performance effects that are usually visible on the protocol layer. Typical culprits are running HTTP/1.1 or ineffective origin caching as well as bot detection or other libraries injected by the CDN configuration.\n\nGoogle Search Console\n\nIf you have an active Google Search Console with your sitemap uploaded, it may be valuable to get a coverage report and make sure that indexing works as expected. The Google Search Console should be monitored for the weeks after a go-live.\n\n404 Report\n\nAfter a website has been migrated there is usually a set of 404 Not Founds, which should be monitored after the go-live and redirected to popular page URLs. This information can be pulled from your site analytics and the respective Franklin bot report. Monitoring this for the weeks after a go-live is recommended.","lastModified":"1675423484"},{"path":"/docs/","title":"AEM Franklin Documentation","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"Franklin documentation hub for authors, developers and operations.","content":"AEM Franklin Documentation\n \nContent Architecture and Authoring\n \n\nAuthoring and Publishing in Franklin\n\n \n\nLearn how to author and publish content for your website in Franklin\n\n \n\nThe Franklin Sidekick\n\n \n\nInstall and use the Franklin Sidekick in your browser.\n\n \n\nRedirects\n\n \n\nSimple management of redirects for your website.\n\n \n\nBulk Metadata\n\n \n\nAdvanced metadata managed centrally and applied to pages in bulk.\n\n \n\nPlaceholders\n\n \n\nVariables and settings that are used across your site or locale\n\n \n\nImport content\n\n \n\nLearn how to use the Franklin importer to import content from an existing site\n\n \n \n \nStyle\n \nlight\n \nDevelopment with Franklin\n \n\nGetting Started\n\n \n\nIntro tutorial to get you started with Franklin quickly.\n\n \n\nGetting Started Videos\n\n \n\n4 episode short-form video tutorial series to get you up and running with AEM Franklin project\n\n \n\nAnatomy of a Franklin Project\n\n \n\nUnderstand the repository layout of a Franklin project.\n\n \n\nMarkup, Sections, Blocks and Auto Blocking\n\n \n\nLearn about the Franklin concepts that make up a page.\n\n \n\nBlock Collection\n\n \n\nLearn more about out-of-the-box and commonly used blocks\n\n \n\nSpreadsheets and JSON\n\n \n\nAccess structured, table oriented content.\n\n \n\nIndexing\n\n \n\nSetup indexes for searching and filtering.\n\n \n\nSitemap\n\n \n\nGuide to setting up automatic sitemap xml generation.\n\n \n\nForms\n\n \n\nHow to use the Franklin Form Service to collect data directly into a spreadsheet.\n\n \n\nKeeping it 100, Web Performance with Franklin\n\n \n\nMaking sure that your websites stay fast.\n\n \n\nAdmin Service APIs\n\n \n\nReference guide for the Franklin Admin Service.\n\n \n\nGo Live Checklist\n\n \n\nMake sure you are ready to launch your Franklin site successfully.\n\n \nStyle\n \ndark\n \nAdmin and Infrastructure\n \n\nCloudflare Worker Setup Guide\n\n \n\nSet-up your Cloudflare CDN to use Franklin as an origin.\n\n \n\nAkamai Setup Guide\n\n \n\nSetup your Akamai CDN to use Franklin as an origin.\n\n \n\nCloudfront Setup Guide\n\n \n\nSetup your Cloudfront CDN to use Franklin as an origin.\n\n \n\nFastly Setup Guide\n\n \n\nSetup your fastly CDN to use Franklin as an origin\n\n \n\nSetup Push Invalidation\n\n \n\nfor Fastly, Akamai, Cloudflare and Cloudfront CDNs.\n\n \n\nCustom HTTP Response Headers\n\n \n\nFinetune the http response headers of your resources.\n\n \n \n \nStyle\n \nlight","lastModified":"1673255571"},{"path":"/docs/placeholders","title":"Placeholders","image":"/docs/media_1ca9282b18333fd9acfa2c200017a3cebebd631e1.png?width=1200&format=pjpg&optimize=medium","description":"In most websites, there are strings or variables that will be used throughout the site. Especially in sites that need to support multiple languages, it ...","content":"Placeholders\n\nIn most websites, there are strings or variables that will be used throughout the site. Especially in sites that need to support multiple languages, it is not a good idea to hard code such values. Instead placeholders can be used and managed centrally.\n\nPlaceholders can be managed as a spreadsheet that is either in the root folder of the project or in the locales root folder in the case of a multilingual site.\n\nName the file placeholders for Google Docs. Name the file placeholders.xlsx for SharePoint.\n\nThe spreadsheet has to contain at least two columns titled Key and Text.\n\nThe Key column is an identifier that is transformed automatically to be easily accessible via code. The Text is the literal text (or string) for a placeholder with a given key.\n\nAfter making changes to your placeholder spreadsheet, you can preview your changes via the sidekick and have your stakeholders check that the new placeholders are working on your .page preview website before publishing the placeholder changes to your production website. See the Sidekick documentation for more information about switching between environments.","lastModified":"1680700562"},{"path":"/docs/redirects","title":"Redirects","image":"/docs/media_1aa60a71f1d7b3fe4e8be3afe78f4816520c9047e.png?width=1200&format=pjpg&optimize=medium","description":"Every website has the need for redirects. For example if you relocate or delete content, you want your users to still be able to find ...","content":"Redirects\n\nEvery website has the need for redirects. For example if you relocate or delete content, you want your users to still be able to find it or the next best thing. See the document Authoring and Publishing Content with Franklin for more information on deleting content.\n\nIn Franklin you can intuitively manage redirects as a spreadsheet called redirects (or redirects.xlsx) in the root of your project folder.\n\nThe spreadsheet has to contain at least two columns titled Source and Destination.\n\nThe Source is relative to the domain of your website, so it only contains the relative path. The Destination can be either a fully qualified URL if you are redirecting to a different website, or it can be a relative path if you are redirecting within your own website.\n\nAfter making changes to your redirects spreadsheet, you can preview your changes via the sidekick and have your stakeholders check that the redirects are working on your .page preview website before publishing the redirect changes to your production website. See the Sidekick documentation for more information about switching between environments.\n\nRedirects take precedence over existing content, which means that if you have an existing page with a given URL, defining a redirect for that same URL will make Franklin serve the redirect for that page and “hide” the existing page. Conversely if a redirect that has been set up on an existing page is removed, the existing page will be served again, unless the page was unpublished.","lastModified":"1678699433"},{"path":"/docs/sidekick","title":"Using the AEM Sidekick","image":"/docs/media_1253e34b577ee14d491a2c7261f257f0220d955ba.png?width=1200&format=pjpg&optimize=medium","description":"The AEM sidekick provides content authors with a toolbar offering context-aware options so that they can edit, preview, and publish their content directly from the ...","content":"Using the AEM Sidekick\n\nThe AEM sidekick provides content authors with a toolbar offering context-aware options so that they can edit, preview, and publish their content directly from the pages of your website.\n\nThis document explains how to use the sidekick.\n\nInstallation\n\nPlease see the document Installing the AEM Sidekick for how to install and configure the sidekick.\n\nUsing the Sidekick\n\nThe sidekick can be invoked in the following contexts:\n\nWithin project environments Within online editors (depending on your project setup) to edit your content\nGoogle Docs/Sheets Microsoft Word/Excel\n\nTo use the sidekick extension, navigate to a URL associated with your project. This can be one of the following:\n\nA SharePoint or Google document (desktop only) A Preview URL (the domain name ending in .hlx.page) A Live URL (the domain name ending in .hlx.live) A production URL (the domain name being your project’s public host name)\n\nThe sidekick extension can be toggled by clicking the Adobe Experience Cloud icon next to the address bar. If you are using the bookmarklet, click the bookmarklet in your browser’s toolbar.\n\nEnvironment Switcher\n\nThe environment switcher on a sidekick in Google Docs.\n\nWhen using Frankling to create content, content moves from the editor through different environments. The environment switcher allows you to easily jump around between them.\n\nPreview\n\nThis option takes you to the preview environment, which reflects the latest changes of the page rendered from the source document. You can also send preview URLs to stakeholders so they can review your content before it gets published. Note that this option is only enabled if the content you are looking at has been previewed before.\n\nThe preview URL follows the pattern https://branch--repo--org.hlx.page/path.\n\nbranch, repo and org identify the location of your project’s underlying code in GitHub /path corresponds to the location of the content in Google Drive or OneDrive, starting from the root folder. A / at the end of a path refers to the index document in a folder.\nLive\n\nThis option is only available if there is not yet a production environment. It shows the published content and serves as a stand-in (and the origin) for your project’s production environment. Note that this option is only enabled if the content you are looking at has been published before.\n\nThe live URL looks almost identical to the preview URL, the only difference being in the 1st level domain: https://main--repo--org.hlx.live/path\n\nProduction\n\nThis option takes you to the production environment, which is your project’s public-facing website. Note that this option may not be available during the development stage of your project or because the content has not been published yet.\n\nThis environment can be a 3rd-party or “bring your own” CDN. Depending on the project setup, new content may only appear after a delay.\n\nIf your public-facing domain name is yourproject.com, the production URL would be https://yourproject.com/path\n\nActions\n\nThere are a number of actions that you can take on your content by conveniently using the sidekick toolbar. Actions that have not been executed since the content was last changed are badged with an orange indicator.\n\nPreview\n\n\\ The preview action on a sidekick in Google Docs.\n\nPreview is the predominant action in the editor. It (re)generates the preview page based on the current document and opens it in a separate tab.\n\nEdit\n\nThe Edit action is available in all three environments. It opens the online editor of the current page’s source document in a separate window.\n\nThe sidekick in a preview environment.\n\nAt a minimum read access to the document in Google Drive or OneDrive is required to use this action.\n\nReload\n\nThe Reload action is available in the preview environment only. It can be used to force a content refresh, for example if you have editor and preview open side by side while working on the content. The action is identical to the Preview action in the editor.\n\nPublish\n\nThe Publish action is available in all three environments and makes the current preview version of the page available in the live and production environments.\n\nThe sidekick in a live environment.\n\nVisitors to your public-facing website will not be able to see changes until they are published.\n\nBulk Actions\n\nOpen the sidekick in Google Drive or Microsoft SharePoint and select one or more files to bulk preview and publish files and conveniently copy their URLs. You can also use this feature to preview and publish media like SVG or PDF files.\n\nAdobe continues to extend the support for file formats that can be published directly from your content source (SharePoint or GDrive) based on popular use and security considerations. Currently the supported formats include: PDF, SVG, JPG, PNG.\n\nFormats that are under consideration for being added include: XML, MP4 as well as raw DOCX, XLSX, PPTX without transformation.\n\nBulk Preview\n\nSelecting multiple documents in SharePoint or GDrive allows you to preview multiple documents en masse.\n\nBulk preview in Google Drive.\n\nBulk Publish\n\nSelecting multiple documents in SharePoint or GDrive allows you to publish multiple documents en masse.\n\nBulk publish in Google Drive..\n\nCopy URLs\n\nUse this feature to copy the preview, live or production URLs of one or multiple files.\n\nUnpublishing Content\n\nIf you need to remove content from your website, the first thing to do is to delete, rename, or move the underlying source document in Google Docs or OneDrive.\n\nFor a page without a source document (i.e. it was renamed or moved), the sidekick will show the following two actions when invoked in the preview environment.\n\nThe sidekick on a preview page without a source document.\n\nDelete\n\nThe Delete action will permanently delete the page from all environments, implicitly unpublishing it.\n\nUnpublish\n\nThis Unpublish action will unpublish the page, but still keep it in the preview environment for reference.\n\nSee the document Authoring and Publishing Content for more information about deleting content.\n\nCaution: The Delete and Unpublish actions cannot be undone! Double-check the URL and page content to make sure it is really OK to delete and/or unpublish a page. The source document may have been moved accidentally and may not need to be deleted.\n\nSharing the Sidekick\n\nYou can share the sidekick configuration for your project by clicking the share symbol at the top right. This will copy a share URL to your clipboard and allow you to paste it in a DM or email to a colleague. The share URL will enable the recipient to effortlessly install the sidekick for your project.\n\nSee the document Installing the AEM Sidekick for more information.\n\nCustomizing the Sidekick\n\nIf you are a developer, you can customize the sidekick for your project. For example to add a production host, you can add a /tools/sidekick/config.json configuration file to your project's GitHub repository\n\nhttps://gist.github.com/rofe/491772e7e3f706cb4aca5f9f6451e516\n\nFor available configuration options, see the Sidekick API documentation or the config schema. Here are some basics to get started:\n\nid and title are mandatory. title will show up on the plugin button. You can provide localized titles in a titleI18n object How to specify the plugin action depends on the intent:\nTo simply open a URL in a new window, you can use the url property. You can optionally have it open in a palette by setting isPalette to true.\n/tools/sidekick/config.json:\nhttps://gist.github.com/rofe/8a0961575d434fb86ce4fdda3bea60f5 Executing code must be done in the context of your page (not supported in the edit environment). You can use the event property to specify the name of an event to be fired when the plugin button gets clicked. You can then react to it in your application code as in the following example:\n/tools/sidekick/config.json:\nhttps://gist.github.com/rofe/e5f215be84acc51ffe87002408d4e107 /scripts/scripts.js:\nhttps://gist.github.com/rofe/4d38d9ec8253cc2f4bec3dad757c33fc\nThe environments array specifies where the plugin should appear (edit, preview, live, or prod). You can also define exclude_paths and include_paths arrays to narrow down the plugin’s appearance based on the path. isContainer turns a plugin into a dropdown. You can then add other plugins to it by specifying its ID in the containerId property. override can be set to true to extend an existing plugin.\n3rd Party Libraries\n3rd Party Library\t License webcomponents-ce v2.6.0\t BSD \n js-yaml v4.0.0\t MIT","lastModified":"1681286863"},{"path":"/docs/slack","title":"Slack Support for Franklin","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"Franklin support is powered by SlackOps, meaning all support is rendered through Slack. Each Franklin website gets a dedicated Slack channel and both the Franklin ...","content":"Slack Support for Franklin\n\nFranklin support is powered by SlackOps, meaning all support is rendered through Slack. Each Franklin website gets a dedicated Slack channel and both the Franklin team and the Franklin bot are available to answer your questions.\n\nThe Franklin team is globally distributed. During US and European business hours you can expect to receive an answer within one hour. Outside those times, responses may take a bit longer.\n\nSlack Bot Installation\n\nIn order to use the Franklin Slack bot, it must be configured for your Slack channel and Franklin project.\n\nGo to your Franklin Slack channel (or create a new channel) Add the preview URL of your site to the topic or description, e.g.\nhttps://main–repo–owner.hlx.page Type @FranklinBot info and confirm to invite the Franklin Slack bot to your channel and start the setup process. Follow the instructions in the created thread to complete the installation.\nSlack Bot Skills\nUpload Files\n\nIf you have large files that you want to add to a Word or Google Docs document, you can use the Slack bot to upload them. Start a thread with Hey @FranklinBot upload and then drag the files you want to upload into the Slack window.\n\nCurrently it is only recommended to upload mp4 files to the slackbot and upload everything else directly from your content source.\n\nThe Franklin Slack bot will create a URL for each file. You can copy that URL into your document, where it will become an image or embedded video.\n\nGet Page Views\n\nIf your site is set up for Real User Monitoring (RUM), you can ask Franklin Slack bot for page view statistics by asking Hey @FranklinBot page views for https://www.example.com\n\nGet Top Pages\n\nIf your site is set up for Real User Monitoring (RUM), you can ask Franklin Slack bot for page view statistics by asking Hey @FranklinBot top pages for https://www.example.com\n\nGet Top Tags\n\nIf your site is set up for Real User Monitoring (RUM) and is using tags to categorize content, you can ask Franklin Slack bot for tag view statistics by asking Hey @FranklinBot top tags for https://www.example.com\n\nGet Top Images\n\nIf your site is set up for Real User Monitoring (RUM), you can ask Franklin Slack bot for image view statistics by asking Hey @FranklinBot top images for https://www.example.com\n\nThis also works for single pages that have lots of traffic and can tell you how far people are scrolling on your page.\n\nGet Site Performance\n\nYou can ask Franklin Slack bot for page performance statistics by asking Hey @FranklinBot is my site slow? or, optimistically, Hey @FranklinBot is my site fast?\n\nIf you have RUM enabled on your site, you will see the performance of the top three pages, as well as Google’s Lighthouse Score for your home page.\n\nYour site performance is the most critical element to ensuring your web experience is effective, is getting traffic, and is enabling conversions. Please see the Franklin website for more information.\n\nAnswer Frequently Asked Questions\n\nIf you don’t have the time to read the Franklin Frequently Asked Questions yourself, you can just ask the Franklin Slack bot Hey @FranklinBot my question: Why does site performance matter?","lastModified":"1680019844"},{"path":"/docs/architecture","title":"Franklin Architecture","image":"/docs/media_1edff32fb172a1d201075b0a526ed38ee2e8f6de9.png?width=1200&format=pjpg&optimize=medium","description":"Take a deep dive into the architecture behind Helix.","content":"Franklin Architecture\nArchitectural Evolution\n\nFranklin (formerly Helix) has undergone architectural evolution since the start of the project. The main phases are:\n\nHelix 1 – A bring-your-own (Adobe I/O) runtime framework-driven approach that would allow server-side customization Helix 2 – Software-as-a-service that relies on client-side customization Helix 3 – Software-as-a-service with superior availability and performance with the same feature set as Helix 2\n\nThe current version of the architecture is Helix 3. Prior versions stay documented as long as they are in active use.\n\nHelix 3\n\nHelix 3 delivers the core feature set of Franklin (high-performance websites with low code and zero-friction authoring) in a simplified architecture that optimizes stability and availability.\n\nPreface\n\nProject Franklin is based on serverless micro services architecture, where each service is managed in a separate GitHub repository. Each individual service is designed to be single-purpose and can typically be understood on its own within 15 minutes to half an hour. However, the connections between the different services that make up the overall architecture require some explanation.\n\nThe goal of this document is to provide this explanation and give a lay of the land of the Franklin architecture.\n\nThe four main areas in Project Franklin are:\n\nEDGE - Delivery through the Fastly Edge computing platform PIPE - Markdown-based content transformation into hypermedia AUTHOR - Authoring of content using Google Docs and Word Online, and publishing into high-availability content stores DEV - Development workflow\n\nThe architecture diagram at the beginning of this document uses the Fundamental Modeling Concepts structure chart notation.\n\nUnless otherwise indicated, inter-service communication is based on HTTP.\n\nEDGE\n\nA typical Franklin Pages production deployment uses two stacked Fastly Service Configurations with each Service Config using a performance-enhancing technique called shielding.\n\nShielding means that all traffic from an edge node in Fastly’s CDN will be forwarded to a designated “shield” node that then makes requests to the origin or backend server. This increases the likelihood of content already being cached in the shield node and reduces the overall number of requests on the origin. The shield node is simply another edge node that has been selected for reasons of proximity to the origin.\n\nIn the architecture chart above, the two CDN configurations are referred to as “outer CDN” (receiving incoming requests first, serving a custom domain name, adding custom caching rules) and “inner CDN” (providing basic caching, routing requests to the various backends used by Project Franklin)\n\nThe CDN configuration is managed as a VCL-based Fastly service configuration (although experimental implementations based on Cloudflare Workers and Fastly Compute@Edge exist).\n\nBased on the URL, the Fastly Service performs an edge dictionary lookup to determine the appropriate Content Bus ID (a unique identifier of a content source used while publishing) and the type of request to handle.\n\nMedia Requests (images, videos, etc.) are served directly from the Media Bus using content-addressable storage where the content hash forms the significant part of the URL. Content Requests (HTML and JSON) are served using the Helix Pipeline Service, see the PIPE section for details. Static Content is served from the Content Bus directly, or if unavailable, from the Code Bus storage location.\n\nAt the Inner CDN level, no caching is applied so that all requests accurately represent the latest state of published content.\n\nPIPE\n\nThe main delivery functionality is provided by the Franklin Pipeline Service, which uses the helix-pipeline framework to render HTML, and renders filtered JSON directly.\n\nThe Pipeline Service pulls configuration from the Code Bus and the published Content from the Content Bus.\n\nAUTHOR\n\nAuthoring in Helix 3 is handled through the interplay of three components:\n\nThe Franklin Bot watches a GitHub repository for code changes and invokes Helix Admin. The Sidekick allows authors to trigger publishing actions explicitly and invokes Helix Admin. Helix Admin does all the work with the help of Helix Content Proxy, which renders content from Sharepoint and Google Drive by invoking Helix Data Embed, Helix Word Markdown Adapter, or Helix Google Docs Markdown Adapter.\n\nThe Helix Admin REST API is fully documented and covers the main functionality:\n\nPreview generates a markdown document from the original content source, places it in the preview partition of the content bus, and returns the preview URL. Publish copies a markdown document from the preview partition into the live partition of the content bus. Code copies code from the GitHub repository into the Code Bus storage and also updates the Inner CDN edge dictionaries according to the fstab mappings. Cache clears the Outer CDN cache.\nDEV\n\nUnlike Helix 2, the Helix CLI does not simulate a full-blown Helix setup, but simply proxies content and media requests to the inner CDN. This allows developers to see their code changes in real-time (served from the working copy) and mix it with real content from Content and Media Bus","lastModified":"1678699501"},{"path":"/docs/authoring","title":"Authoring and Publishing Content with Franklin","image":"/docs/media_1bedfa99253e5be19023b87641e0130b3a4f913f2.png?width=1200&format=pjpg&optimize=medium","description":"If you use Microsoft Word or Google Docs, then you already know how to create content for Franklin.","content":"Authoring and Publishing Content with Franklin\nAuthoring Content with Franklin\nYou already know the most important part.\n\nIf you use Microsoft Word or Google Docs, then you already know how to create content for Franklin.\n\nYour documents in Word or Google Docs become your pages on your website. Your headings in your documents will become headings on your website. Bold, italic, underlining, lists, images, etc. will all appear on your website.\n\nImages and Videos\n\nTo add an image to your document, just drag the image into the page. Word and Google Docs automatically add it as normal. Franklin will resize it to fit the browser window of your visitor. Any resizing you do in Word or Google Docs will have no effect.\n\nIt is a good idea to set an alternative text for all images you add to the document, as this increases accessibility and helps search engines find your content.\n\nTo do this, use the built-in features of both Word and Google Docs. See the documentation of either product for more details.\n\nMicrosoft Word: Add alternative text to a shape, picture, chart, SmartArt graphic, or other object Google Docs: Make your document or presentation more accessible\n\nWord and Google Docs do not allow you to just drag and drop videos, but with the help of the Franklin Slack Bot, you can add videos or large images to your documents.\n\nTo do so, open your Slack channel and say “Hey @FranklinBot, upload this video”, then drag the video file into the Slack thread. The Slack bot will respond with a unique URL for the video you just uploaded which you can then copy and paste into your document. Franklin will add the video to your web page. See the document Slack Support for Franklin for more information.\n\nLinks\n\nLinks are an important part of every website and you can add them both in Word and Google Docs. If you are creating a link within your website, enter the link just the way it should appear on the final website, even if the page you are linking to is not public yet.\n\nFranklin will automatically adjust all internal links on your website, so using the absolute, public URL is the safest way to create links that point to the right place.\n\nSections\n\nOn some websites you have sections or blades that change background color or otherwise indicate breaks in the content. Creating a section break in Franklin depends on the editor you use:\n\nMicrosoft Word: just place --- (three hyphens) on a single line Google Docs: select “Insert → Horizontal Line” from the menu\nMetadata & SEO\n\nMetadata is information about your page that is invisible to visitors, but important to search engines and social media sites that want to find your content or embed it.\n\nTo add metadata to your page, at the end of the document, create a table like the following. Creating a table works almost the same in Word and Google Docs. See the documentation of either product for more details.\n\nMicrosoft Word: from the menu, click “Insert → Table” and select the number of columns and rows you want Google Docs: from the menu, click “Insert → Table” and choose how many rows and columns you want to add\n\nStructure your table like this:\n\nThe first row of the table should just contain the word “Metadata”. This tells Franklin that there is custom metadata for your document.\n\nThen create one row for each metadata property. The left column contains the name of the metadata property, the right column the value. In most cases, values are plain text, but as you can see from the “image” row, sometimes other content can be used, too.\n\nYou’ve just created a metadata block. You can also create metadata for many pages at once. See the document Bulk Metadata for more information.\n\nSpecial metadata properties\n\nThe metadata block has a few special properties that can serve multiple purposes.\n\nimage - this will be shown as og:image, og:image, secure_url, and twitter:image title - will be used as og:title as well twitter:title and <title> canonical - will be used as <link rel=”canonical”> description - will be used as description, og:description, twitter:description\nBlocks\n\nBlocks are a way for Franklin to work with more structured content and add special functionality to your site. Which blocks are available to your site depends on what your development team has implemented and differs from site to site. The only block that is common to all Franklin sites is the metadata block described previously.\n\nRegardless of site, the structure of a block is always the same: it is a table with a merged first row that serves as the block name (header row). The header row may have specific formatting like a background color to increase their discoverability and differentiation in a document.\n\nBlocks usually contain content, configuration, or references to other pieces of content, be it from other documents, spreadsheets, or both.\n\nBlocks can have options in parenthesis. For example, a Columns block can have a (highlight)option which passes a layout hint to the block display logic.\n\nAs you can see from this example, you are free to put any kind of content into the cells of a block, and it is up to the block to either render the content or ignore it. If the site you are working on uses blocks extensively, then you will probably have a reference list of blocks you can use.\n\nSee the document The Franklin Block Collection to learn more about out-of-the-box blocks in Franklin.\n\nStructured Data in Spreadsheets\n\nFranklin allows you to put content into spreadsheets and then turns the spreadsheet into an API that your developers can use. This allows you to use spreadsheets like a headless CMS for use in data tables, navigation, or feature comparisons, for example.\n\nSee the document Spreadsheets and JSON for more information.\n\nPreview and Publish Content in Franklin\n\nOnce a document is created in Google Drive or Sharepoint, you can preview the corresponding web page and eventually publish the content to your production website.\n\nThe preview function is used to share pages with stakeholders before they are published and available to the general public on your website.\n\nIn order to preview, publish, or delete content, Franklin provides the Sidekick that can be installed as a bookmarklet or a browser extension.\n\n\nIdeally you receive a pre-configured link for your project from a fellow author, via the “Share Your Sidekick” function of the sidekick. This ensures that your sidekick is configured properly to edit and publish your project. See the Sidekick documentation for more information.\n\nPreview\n\nIn Word or Google Docs, open the Sidekick, then click the “Preview” button. This will open a new browser window (check for the popup warning) that has the preview version of your site.\n\nAlthough you can copy and share the URL of this preview, it is not meant for production. It does not have your domain name on it and is invisible to search engines. If the content is ready for publication, you can publish. If you need to make changes, open the Sidekick on the preview page and click “Edit” to go back to Word or Google Docs.\n\nPublish\n\nPublishing makes your content visible to everyone on the internet. To publish something, open the sidekick on a preview page (or follow the instructions above to open the preview again), then click “Publish”. After a few seconds, a new browser window will open, with your page on your public website.\n\nOnce your content has been published, it is visible to everyone on the internet, and search engines will be able to find it.\n\nDelete\n\nGenerally, deleting published content and therefore removing publicly accessible resources from the web can be problematic because of inbound links from search, social, bookmarks and other referring sites. If a page is deleted that was once published, it is recommended to use redirects to make sure that incoming traffic for the deleted page is sent to the next best place. See the document Redirects for more information.\n\nIf you want to remove published content or just delete it from your site as part of a clean-up, doing so is a two-step process.\n\nFirst, delete the source document from Sharepoint or Google Drive.\nAlternatively you can rename the page or move it to a different folder, for example your drafts folder.\nThen open the page you want to delete on the preview site and open the sidekick. There will be two options: Delete and Unpublish.\nUnpublish removes it from the public production website, but keeps the preview. Delete removes the preview, too.\n\nDeleting or unpublishing something is permanent and cannot be easily undone. If you want to undo a deletion, you have to restore the original document in Sharepoint or Google Drive and then publish it again.","lastModified":"1678698701"},{"path":"/docs/bulk-metadata","title":"Bulk Metadata","image":"/docs/media_108869480050aff9442121e65bc499482432b0776.png?width=1200&format=pjpg&optimize=medium","description":"In some cases, it is useful to apply metadata en masse to a website. Common use cases include:","content":"Bulk Metadata\n\nIn some cases, it is useful to apply metadata en masse to a website. Common use cases include:\n\nA certain section of a website should look and feel different from the rest of the website (such as a different template or a different theme). Default metadata such an og:image should be applied to portions of the website. If a certain portion of the website should not be indexed by robots, the metadata can be used to set the robots meta tag to noindex for a portion of the site.\n\nIf you want to create metadata for many pages at once, create either an Excel workbook or a Google Sheets workbook in the root folder of your website in SharePoint or Google Drive.\n\nName the file metadata for Google Drive. Name the file metadata.xlsx for SharePoint.\n\nThe workbook should have only one worksheet and at least two columns as in the following image.\n\nThe column titled URL has the URL pattern of the pages that should get a particular metadata entry.\n\nThe wildcard * (the asterisk) can be used as a prefix or suffix, allowing for flexible matches on the URL pathname. Typical examples include /docs/** or **/docs/**.\n\nFor each metadata property, create a column in the worksheet and name it using the property you want to assign. Typical examples include template, theme, or robots.\n\nPage-level metadata added via a metadata block takes precedence over bulk metadata. See the documents Authoring and Publishing Content with Franklin and Metadata (block) for more information.\n\nNote: You need to preview / publish the metadata sheet in order to see changes reflected on your page.\n\nTip: Excel can be slow to update inside SharePoint. If you do not see your changes reflected in preview or publish, hard refresh (click into URL bar and refresh) the Excel document in your browser and preview should work as expected.","lastModified":"1680104060"},{"path":"/docs/byo-cdn-akamai-setup","title":"Akamai Setup","image":"/docs/media_1c850d2a4f12b9dfe08ffafefda6253aacd3be7ce.png?width=1200&format=pjpg&optimize=medium","description":"The following screenshots illustrate how to use the Akamai Property Manager to configure a property to deliver Franklin content. Essential settings are marked with a ...","content":"Akamai Setup\n \n\nThe following screenshots illustrate how to use the Akamai Property Manager to configure a property to deliver Franklin content. Essential settings are marked with a red circle.\n\n \nEssential Property settings\n \nOrigin Server\n \n\n     \n\n \nAdd Behavior: Remove Vary Header\n \n\n     \n\n \n\n     \n\n \n\n     \n\n \nAdd Behavior: Modify Outgoing Request Header\n \n\n     \n\n \n\n     \n\n \n\nAdd more outgoing request headers:\n\n \n\n     \n\n      \n\n \nAdd/Modify Behavior: Caching\n \n\n     \n\n \nAdd Behavior: HTTP/2\n \n\n(Optional, but recommended)\n\n \n\n     \n\n \n\n     \n\n \n\nThese are all essential property settings for delivering Franklin content.\n\n \nhttps://main--helix-website--adobe.hlx.page/docs/setup-byo-cdn-push-invalidation-for-akamai","lastModified":"1664375453"},{"path":"/docs/byo-cdn-cloudflare-setup","title":"Cloudflare Setup","image":"/docs/media_13d06c2eddba394e68156f5f33d19c9b212285f23.png?width=1200&format=pjpg&optimize=medium","description":"This document illustrates how to configure Cloudflare to deliver Franklin content. Essential settings are marked with a red circle.","content":"Cloudflare Setup\n\nThis document illustrates how to configure Cloudflare to deliver Franklin content. Essential settings are marked with a red circle.\n\nCreate a Cloudflare Site\n\nLog into your Cloudflare account. And under Websites, create a new site by clicking Add Site.\n\nEnter the domain and click Add site.\n\n\n\n\nSelect a plan for your new site such as Pro, Business, or Enterprise.\n\nThe setup described in this walk-through requires the Enterprise plan. If you want to use another plan (incl. Free plan), please follow the instructions here.\n\nhttps://main--helix-website--adobe.hlx.page/docs/setup-byo-cdn-push-invalidation-for-cloudflare\nDNS Setup\n\nSelect DNS in the left pane:\n\n\n\n\nClick on Add record to add a CNAME record. Enter the value to the hostname of your Franklin origin (e.g. main--mysite--hlxsites.hlx.live) in the Target field.\n\n\n\nMake sure the CNAME record is Proxied.\n\nSSL/TLS Setup\n\nSelect SSL/TLS from the left pane and Edge Certificates in the dropdown list:\n\nOn the right side, scroll down to Always Use HTTPS and enable it:\n\nConfigure Caching\n\nCreate Page Rule\n\nThe result should look like this:\n\n\n\nCreate Transform Rules\n\nChoose Transform Rules in the left pane, click on Create transform rule and select Modify Request Header:\n\n\n\nEnter a name (e.g. Required Franklin headers) and complete the form as follows (replace www.mydomain.com with your domain):\n\nNB: The X-Push-Invalidation: enabled request header enables the Franklin push invalidation incl. long cache TTLs. Make sure you have successfully configured push invalidation for your project.\n\nNow, similarly, add a Modify Response Header rule:\n\n\n\n\nAfter completing all steps you should be all set.","lastModified":"1680195387"},{"path":"/docs/byo-cdn-cloudflare-worker-setup","title":"Cloudflare Setup","image":"/docs/media_13d06c2eddba394e68156f5f33d19c9b212285f23.png?width=1200&format=pjpg&optimize=medium","description":"The following screenshots illustrate how to configure Cloudflare to deliver Franklin content. Essential settings are marked with a red circle.","content":"Cloudflare Setup\n\nThe following screenshots illustrate how to configure Cloudflare to deliver Franklin content. Essential settings are marked with a red circle.\n\n\nThis setup can be completely done in the browser by using the Cloudflare Dashboard only. If you are already familiar with Cloudflare Workers, Wrangler & GitHub and not afraid of entering commands in a terminal window you might want to follow the instructions here instead.\n\nCreate a Cloudflare site\n\nIf you already have a cloudflare site and DNS setup you can skip forward to the Setup push invalidation section.\n\nEnter the domain:\n\n\n\nSelect a plan:\n\nNote that surgical push invalidations are only supported on the Enterprise plan. On all other plans the entire cache of the site will be purged every time an author publishes a content change.\n\nFor this walk-through we’ll use the Free plan.\n\nhttps://main--helix-website--adobe.hlx.page/docs/setup-byo-cdn-push-invalidation-for-cloudflare\nDNS Setup\n\nWe’ll skip the DNS setup step as this would be beyond the scope of this simple walk-through. Make sure the CNAME record is Proxied:\n\n\n\nSSL/TLS Setup\n\nSelect SSL/TLS from the left pane and Edge Certificates in the dropdown list:\n\nOn the right side, scroll down to Always Use HTTPS and enable it:\n\nConfigure Caching\n\nCreate Page Rule\n\nurl\nURL (required)\nCreate Worker\n\nChoose Workers in the left pane and click on “Manage Workers”:\n\n\n\nClick on “Create a Service”:\n\n\n\nEnter a name for the worker (e.g. “Franklin-worker”) and click on “Create Service”:\n\n\n\nworker\nService name\n\n\n\nClick on “Quick edit”:\n\n\n\nEdit worker code\nIf you have successfully configured push invalidation copy the content of this file, otherwise copy the content of this file. In the left pane, replace the existing content with the copied content. Click on “Save and Deploy”:\n\n\n\n\n\n\nClick on Settings and “Add variable”:\n\n \n\n\nvariable\nVariable name\nvalue\nValue\n\n\nAdd a variable ORIGIN_HOSTNAME and set the value to the hostname of your Franklin origin (e.g. main–mysite–hlxsites.hlx.live):\n\n\n\n\n\nClick on Triggers an select “Add route”:\n\n \n\nEnter your domain route (e.g. www.mydomain.com/*), select your zone and click on “Add route”:\n \n\n\nAfter completing all steps you should be all set.\n\nurl\nRoute\nExpanding the Franklin footprint on your website\n\nIn case you start with having only a portion of the website being routed to your Franklin .live origin and have routed a specific folder (eg. /blog/*) you can subsequently add more routes whenever you are ready to expose new sections of the site by simply adding more routes and repeat the last “add route” steps as needed, without changing your worker configuration.","lastModified":"1680195549"},{"path":"/docs/byo-cdn-cloudflare-worker-wrangler-setup","title":"Cloudflare Setup","image":"/docs/media_13d06c2eddba394e68156f5f33d19c9b212285f23.png?width=1200&format=pjpg&optimize=medium","description":"The following screenshots illustrate how to configure Cloudflare to deliver Franklin content. Essential settings are marked with a red circle.","content":"Cloudflare Setup\n\nThe following screenshots illustrate how to configure Cloudflare to deliver Franklin content. Essential settings are marked with a red circle.\n\nCreate a Cloudflare site\n\nEnter the domain:\n\n\n\nSelect a plan:\n\nNote that surgical push invalidations are only supported on the Enterprise plan. On all other plans the entire cache of the site will be purged every time an author publishes a content change.\n\nFor this walk-through we’ll use the Free plan.\n\nhttps://main--helix-website--adobe.hlx.page/docs/setup-byo-cdn-push-invalidation-for-cloudflare\nDNS Setup\n\nWe’ll skip the DNS setup step as this would be beyond the scope of this simple walk-through. Make sure the CNAME record is Proxied:\n\nSSL/TLS Setup\n\nSelect SSL/TLS from the left pane and Edge Certificates in the dropdown list:\n\nOn the right side, scroll down to Always Use HTTPS and enable it:\n\n\n\nConfigure Caching\n\nCreate Page Rule\n\nCreate Worker\n\nFork or create a new GitHub repository using this template.\n\nClone the repository and follow the instructions in the README. You can skip directly to step 2.\n\nAfter completing all steps you should be all set.","lastModified":"1680194818"},{"path":"/docs/byo-cdn-cloudfront-setup","title":"AWS CloudFront Setup","image":"/docs/media_1ae62bc6ac0e3972ddde3316f46229242046580bf.png?width=1200&format=pjpg&optimize=medium","description":"The following screenshots illustrate how to configure AWS CloudFront to deliver Franklin content. Essential settings are marked with a red circle.","content":"AWS CloudFront Setup\n\nThe following screenshots illustrate how to configure AWS CloudFront to deliver Franklin content. Essential settings are marked with a red circle.\n\nhttps://main--helix-website--adobe.hlx.page/docs/setup-byo-cdn-push-invalidation-for-cloudfront\n\nCreate a CloudFront distribution\n\nConfigure the origin\n\nIf you have successfully configured push invalidation for your project you should also add the following custom header:\n\n\n\nCache behavior\n\nCreate cache policy\n\nCreate origin request policy\n\nCreate Function to remove Age header\n\nGo to Functions and click on “Create Function”:\n\nEnter a name for the function (e.g. stripAgeHeader), an optional description and click on “Create Function”:\n\nReplace the code of the function with the following snippet and click on “Save changes”:\n\nfunction handler(event) {\n  // remove Age header\n  delete event.response.headers['age'];\n  // return response\n  return event.response;\n}\n\n\nClick on “Publish function”:\n\n\n\nFinally, associate the function with your distribution:\n\nThat’s all (more or less). Please test the distribution in a stage environment.","lastModified":"1666362164"},{"path":"/docs/byo-cdn-fastly-setup","title":"Fastly Setup","image":"/docs/media_1df9965c0422b36bff5ec96130fa664d5e1b33639.png?width=1200&format=pjpg&optimize=medium","description":"The following screenshots illustrate how to configure Fastly to deliver Franklin content. Essential settings are marked with a red circle.","content":"Fastly Setup\n\nThe following screenshots illustrate how to configure Fastly to deliver Franklin content. Essential settings are marked with a red circle.\n\nhttps://main--helix-website--adobe.hlx.page/docs/setup-byo-cdn-push-invalidation-for-fastly\nCreate a Fastly service\n\nGo to the Fastly Management UI and select Create Service:\n\nAdd Domain\n\nAdd your production domain (e.g. www.mydomain.com):\n\n\n\nConfigure Origin\n\nAdd your Franklin origin (e.g. main--mysite--hlxsites.hlx.live):\n\nClick on the pencil to edit the new origin:\n\nScroll down and change Shielding to Ashburn Metro (IAD) (non-mandatory but recommended setting) and Override host to the hostname of your origin (same as Address above, e.g. main--mysite--hlxsites.hlx.live) (mandatory setting):\n\nEnable Gzip\n\nCreate VCL Snippets\n\nCreate a VCL snippet for the recv subroutine with the following VCL code:\n\nif (req.url.path !~ \"/media_[0-9a-f]{40,}\\.[0-9a-z]+$\" \n  && req.url.ext !~ \"(?i)^(gif|png|jpe?g|webp)$\"\n  && req.url.ext != \"json\"\n  && req.url.path != \"/.auth\") {\n  // strip query string from request url\n  set req.url = req.url.path;\n}\n\n\nCreate VCL snippets for the miss and pass subroutines with the following VCL code:\n\nset bereq.http.X-BYO-CDN-Type = \"fastly\";\nset bereq.http.X-Push-Invalidation = \"enabled\";\n\n\nNB: The X-Push-Invalidation: enabled request header enables the Franklin push invalidation incl. long cache TTLs.\n\n\nmiss snippet:\n\npass snippet:\n\n\n\nFinally create a deliver snippet with the following VCL code:\n\nunset resp.http.Age;\n\nAfter completing all steps and activating the service version you should be all set:","lastModified":"1678960874"},{"path":"/docs/byo-cdn-setup","title":"BYO CDN Setup","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"Customers may use their own CDN to deliver Helix content under their own domain (aka BYO Production CDN). While customers are generally free to configure ...","content":"BYO CDN Setup\n \n\nCustomers may use their own CDN to deliver Helix content under their own domain (aka BYO Production CDN). While customers are generally free to configure their CDN according to their own needs there are some settings mandated/recommended by Helix:\n\n \nOrigin url\nhttps://main--<yoursite>--hlxsites.hlx.live Headers sent to origin  \nX-Forwarded-Host: <production domain> X-Push-Invalidation: enabled\n(optional, see Configuring Push Invalidation)\n  Origin cache control\nI.e. Cache TTL on the production CDN is controlled via origin cache control response headers. This should be enabled (if available). Compression (gzip)\nShould be enabled Query parameters  \nMust be forwarded to origin Must be included in cache key\n  Age response header\nThe Age response header must be either suppressed or overridden (Age: 0)\n \nVendor-specific setup instructions\n\n \n\nAWS CloudFront\nCloudflare\nAkamai\n\n \n\nIMPORTANT: The production CDN setup should be validated and tested in a stage environment prior to going public.","lastModified":"1664375453"},{"path":"/docs/davidsmodel","title":"David’s Model, Second take.","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"A long time ago, in a galaxy far, far away, I got to a point where I realized that people had a lot of different ...","content":"David’s Model, Second take.\n\nBy: David Nuescheler\n\nHistorical Context\n\nA long time ago, in a galaxy far, far away, I got to a point where I realized that people had a lot of different options on how they could model content in a content repository specification that I was involved in.\n\nSo in 2007 I started writing up my controversial opinions around content modeling in JCR and to make sure that people considered it “just my opinion” and nothing that would claim universal applicability I called it “David’s Model”.\n\nIt seems that this has helped people in the context of modeling content on an infrastructure level.\n\nToday, I find myself very often in situations that feel the same when arguing “How to model or structure content in Franklin”.\n\nThe parameters and stakeholders feel very different today, as I am not primarily worried about the underlying infrastructure anymore but about the user experience of a person authoring content and to a lesser extent the ease of developing against those structures.\n\nIntroduction\n\nThis document should serve as a collection of “Content Modeling” or “Content Structure” best practices as they relate to Franklin and more importantly to an intuitive authoring experience.\n\nThese “rules” are a reflection of lessons learned from first-hand authoring and authoring support and are rooted in the experiences of the Franklin team working on real-world limitations of commonly used authoring environments like Microsoft Word Online or Google Docs, but also in the average knowledge of said tooling by the average author.\n\nMaking the authoring experience intuitive, simple and fast is paramount for the long-term success of any project as lays the foundation of authors enjoying making updates to websites or other digital experiences.\n\nThese rules are evolving, and I would like to invite discussion and commentary on all of them.\n\nRule #1: Blocks are not great for authoring\n\nGenerally blocks are not great as they are surfaced as tables on the authoring side. They provide a necessary framework for an author to indicate some special functionality or design for a certain component. For authors it is often easier to work in “Default Content” wherever possible.\nFor developers blocks are a great way to componentize their work, so there is tension where the developer feels that having something in a block makes their lives easier, sacrificing authoring ease-of-use.\n\n\nA good way to get the best of both worlds is to add Auto Blocking, which means that you infer the existence of a Block based on sequence, template or link information. A good example of this is the hero block in boilerplate which creates a hero block, based on the fact there is an image before the h1 of a page.\n\nIt is definitely an anti-pattern to have things that are represented natively as default content and put them into a block, so something like a Text, Heading or Image block yields a bad authoring perspective.\n\nRule #2: No nested blocks for authors\n\nTo a developer it might very often be tempting to nest complex structures, which in word document would lead to a table inside a table. As Rule #1 states that blocks are not desirable, nested blocks are definitely a lot worse.\n\nConsider fragments (referencing other documents) or links (with auto blocking) to reduce the authoring complexity.\n\nRule #3: Limit Row and Column spans\n\nGenerally we use a Column Span (merged cells) to denote the header with a block name in it. This is relatively straightforward and works well in word and google docs.\nThere are definitely situations where more complex table structure make sense (eg. a portion of the block content being in two columns and another portion of the block content being in three columns) but it is important to understand that creating and managing these structures can be extremely difficult, especially in word online that has very enigmatic support for complex tables.\n\nIf you find yourself in a place where you have a non-trivial rows and columns setup with spans / merged cells, it is probably a good idea to consider a different structure.\n\nRule #4: Fully qualified URLs only\n\nWhen referencing content sometimes developers think in references that are relative to host, the content repository or to their sharepoint / google drive. Authors (and most humans) often think of a URL as an opaque token that they copy/paste from their browser without deciphering them into protocol, hostname, pathname, etc.\nIt is always advisable to just let authors work fully qualified URLs and let either Franklin or a developer do the work of extracting eg. a pathname where needed. As a bonus the URL can and should link to something that is easily accessible for an author from their document.\n\nRule #5: Lists?\n\nI often find myself in a situation where a block has a list of references, something like a list of related articles, or a list of cards. In HTML a lot of those semantically should be considered lists (mostly <ul><il> combinations). For simple lists, something like some text (possibly with a link) or just regular links, a list in word or google docs may be ideal.\n\nIt turns out that list items that are more complex, are somewhere between “hard” to “practically impossible” for an author to keep that in a list in word or google drive.\nIn that case it is much easier to have the list items be rows of a block table. A good example of that is cards block in the boilerplate project.\n\nFor simple lists where it is intuitive to have inferred semantics, eg. a related articles block in a blog post that just contains links to the articles that should be references, it may be easiest to just have a single table cell inside the block containing all the links and dropping the actual list in the word processor. From a code standpoint it is usually easy to just pull all the links from a block and not specifically worry about the details of a structure in that particular block.\n\nRule #6: Buttons need to inherit from context\n\nIn many design guides we find buttons as a common element across many blocks and default content. In many cases they are outlined in all their variations (eg. primary vs. secondary, sizes, colors, etc.) at the beginning of a design specification together with the specified colors and fonts.\n\nIn projects we found that it is intuitive for authors to treat links that are on a line by themselves as for a button. In many cases it is important to inherit from the block and section context that a particular button is in to make the authoring experience easy.\n\nAs an example, if a button (read, “link by itself on a line”) is a part of a hero block, it might assume a certain bigger size, or if a button is in a section that has an inverted background color it might need to automatically switch to a different foreground / background color combination.\n\nThere are cases where within a given section / block context the author needs to be offered a set of explicit choices (eg. primary vs. secondary button) and in those cases we use combinations of bold and italic, usually bold for an explicit primary button and italic for an explicit secondary button.\n\nIt is conceivable that within a given block / section context there are more than four options for an author to choose from, in which case other formatting options could be used like underline, strikethrough etc. however, this is extremely rare and usually an indication that a decision that should be made within the design system is delegated to the author, leading to a less intuitive authoring experience.","lastModified":"1680271804"},{"path":"/docs/experimentation","title":"Franklin Experimentation Capability","image":"/docs/media_136dcb1f5c97bbb5af7c9510c51e081c908e2be36.png?width=1200&format=pjpg&optimize=medium","description":"Testing and Experimentation are a critical feature for the evolution of your web experiences.","content":"Franklin Experimentation Capability\n\nTesting and Experimentation are a critical feature for the evolution of your web experiences.\n\nFranklin has a built-in, low entry barrier capability that lets authors create Instant Experiments in a matter of minutes within the existing design frameworks exposed by the in a website.\n\n\nOn top of that the experimentation framework also allows developers to run Full Experiments that go beyond the current set of blocks and design language.\n\nSince the experimentation framework is built right into the Franklin delivery system, running a test doesn’t come with the usual performance penalty of external testing frameworks and also doesn’t rely on static DOM structures throughout the duration of the test and therefore is much more resilient to changes in both code and content.\n\nInstant Experiment\nWhat is an Instant Experiment\n\nAn Instant Experiment is designed to be very quick to set up and covers cases where you might want to test different variants of your hero blocks, different page layout or CTA placements and verbiage.\n\nAs long as you stay within the established design language of your website and use existing block functionality you should be able to set up an Instant Experiment and send it to production in a matter of a few minutes using your established Franklin authoring tools.\n\nExperiment Identifier\n\nEvery experiment should have its own identifier for tracking and analytics purposes.\nA good starting point is to come up with a good, unique identifier for your experiment, called the “Experiment ID”.\nExperiments are often numbered linearly or correlated to their Issue ID in an issue tracker or management system that is used. Experiment IDs often use a prefix for the project. Examples are OPT-0134, EXP0004 or CCX0076.\n\nCreate your Challenger Page\n\nBy convention it is recommended to create a folder with a lowercase Experiment ID in your /experiments/ folder (for example /experiments/ccx0076/) which is where all the pages for your challenger variants live.\n\nYour experiments folder will look something like this:\n\nOnce the folder is created, make a copy of your control page into that folder, and make the changes on the page that you would like to test as part of your instant experiment. As an example let’s assume we have the following page on the website that we want to run an experiment on.\n\nYour copy of the challenger placed in the experiments/<experiment-id> folder might look like this:\n\nPreview and Publish the challenger page using the sidekick and when you are done authoring the challenger page, keep the URL of the page in the experiments folder around.\n\nSetup your Experiment\n\nAs soon as you have your challengers ready to go all you need to do is to go back to the control page and add some metadata indicating that this page is now part of a test.\n\nThere are two metadata rows that need to be added for an instant experiment.\n\nExperiment : containing your experiment ID\n\nInstant Experiment: containing URLs for all the challengers of this page\n\nSee example below:\n\nFor an instant experiment the traffic split between all the variants (control + challengers) is automatically set to an even distribution. If you have one challenger there will automatically be an even 50% / 50% split between control and the challenger, if you have 2 challengers, you will automatically see a third of the traffic allocated to control and each challenger and so on.\n\nPreview and Stage your Instant Experiment\n\nAs soon as you are ready to preview and stage your experiment you can simply preview the control page with the additional metadata. As soon as you do that you should be able to see the experimentation overlay in your .hlx.page preview environment that lets you switch between the variants and gives you confidence that your test is setup correctly and ready to be launched.\n\nSend your Instant Experiment to Production\n\nTo send your experiment to production and collect data about the performance of each variant, the only step left is to publish the control page.\n\nRunning multi page Instant Experiments\n\nSome experiments include changes across multiple pages. If you would like to run experiments across multiple pages, all you need to make sure is to use the same Experiment ID in metadata across multiple pages and in case you have multiple challengers, make sure that your challenger URLs in the Instant Experiment metadata field are sequenced corresponding to their challengers across pages.\n\nFull Experiment\n\nBeyond the Instant Experiment that is intended to make starting with experimentation really simple, the Franklin Experimentation framework also supports experiments with code and content at the same time. This is particularly useful when you would like to explore new functionality or make changes to layout and get some insights on the performance of the changes before pushing something into production.\n\nFrom an authoring perspective the setup is largely identical to the instant experiment, however the so-called Experiment Manifest is captured in a spreadsheet that is located in the /experiments/<experiment-id>/ folder, and is structured as followed.\n\nFor a full experiment it is recommended that you involve your web developers and the Franklin team.\n\nQuestions or Ideas?\n\nPlease contact the Franklin team on your slack channel.","lastModified":"1678699567"},{"path":"/docs/exploring-blocks","title":"Exploring blocks","image":"/docs/media_1203719cf8684ba910ab67f71e7ed3a7c28b171e9.png?width=1200&format=pjpg&optimize=medium","description":"Blocks are a foundational concept behind adding form and function to sections of a page. If you followed along with the tutorial, you will know ...","content":"Exploring blocks\n \nIntroduction\n \n\nBlocks are a foundational concept behind adding form and function to sections of a page. If you followed along with the tutorial, you will know that you can create simple content structures with just text and images. When you want to group pieces of content, add a bit more structure, or add more complex functionality, blocks can help you achieve these goals.\n\n \nExample blocks ideas\n \n\nA block can really be anything you choose, but here are a few possible use cases:\n\n \nHero Navigation Accordion Carousel Tab List\n \nHow they work\n \n\nBlocks are built using tables in Google Docs or Microsoft Word. These tables are converted to Markdown and rendered as simple divs when requesting HTML.\n\n \n\nTo create a block, you only need a table with at least one row & one column:\n\n \n\n     \n\n \n\nThis will output in HTML as:\n\n \n\nhttps://gist.github.com/auniverseaway/11fd8e0d00038872e77c5f2e4ee9b1f1\n\n \n\nIn order to give some context to our block, we will add a name to the first row + column:\n\n \n\n     \n\n \n\nThis will output in HTML as:\n\n \n\nhttps://gist.github.com/auniverseaway/280d80aef8c1a5a2937874933d84f9d5\n\n \n\nWe now have a CSS class that we can use to either style our block or attach functionality with Javascript. Of course, an empty div with a class is not tremendously useful.\n\n \n\nLet’s add a bit of content using additional rows and columns:\n\n \n\n     \n\n \n\nEach accordion item will have a header with an image and text sitting below. I could have made this content a little simpler by joining the image and text columns, but I want to highlight a few important areas with how the HTML is rendered from this table. Let’s look at the markup:\n\n \n\nhttps://gist.github.com/auniverseaway/21b2db5b928b6014e9a5a485780038c4\n\n \n\nAs we saw before, we have a div with a class representing the entire table. There are a few other notable additions:\n\n \nEvery row after the first is represented by a div (Line 2). Every column is also represented by a div (Line 7). If you have multiple columns, but have merged cells, you will get an empty div (Line 4).\n \n\nOnce you have created this structure in your document, you will want to decorate and style it.\n\n \nDecorating blocks\n \n\nThe concept of decorating blocks is to perform several optional tasks:\n\n \nAdd additional classes or IDs to your markup. Add any semantic elements you may want. Add any aria or accessibility attributes you need. Manipulate the DOM in a way to match your desired output.\n \n\nFor our use case, we’ll decorate the block to add a few classes to help with styling and add an event handler for interactivity:\n(Copy the following code to blocks/accordion/accordion.js)\n\n \n\nhttps://gist.github.com/auniverseaway/8e9d73d7df4e26abef151a9be390ccb6\n\n \n\nLet’s also add some CSS:\n(Copy the following code to blocks/accordion/accordion.css)\n\n \n\nhttps://gist.github.com/auniverseaway/a95567f5ff633b7803710d46c002f9ff\n\n \n\nThe end result should look something a bit like this:\n\n \nGuatemala Huehuetenango Finca Rosma\n \n \n     \n \nA flavor compound of dark sugars, oatmeal-raisin cookies, a faint blackberry accent note and acidic impression.\n \nEthiopia Dry Process Dari Kidame\n \n \n     \n \nFruits are well-integrated into the coffee's sweetness, and acidity is bright for a dry process. Date sugar, orange marmalade, mango, and aromatic cedar. Intense chocolate and a blueberry hint in this dark roast.\n \nColombia Buesaco Alianza Granjeros\n \n \n     \n \nRaw demurara sugar sweetness, aromatic butterscotch, hints of apple, golden raisin, orange peel, and elegant citrus acidic impression. Full City adds in a ribbon of cacao/chocolate bar, rich bittersweetness. Good for espresso.\n \nConclusion\n \n\nAnd that’s it! You’ve taken a simple table in Docs or Word and made it a much more rich experience for your visitors.","lastModified":"1664375453"},{"path":"/docs/faq","title":"Franklin FAQ","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"","content":"Franklin FAQ\n \nhttps://main--helix-website--adobe.hlx3.page/docs/faq.json","lastModified":"1664375453"},{"path":"/docs/indexing-reference","title":"Indexing reference","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"In your helix-query.yaml#, you can define one or more index definitions. A sample index definition looks as follows: https://gist.github.com/dominique-pfister/92cb67b6f95e1edee6a7d6508b124039","content":"Indexing reference\n\nIn your helix-query.yaml#, you can define one or more index definitions. A sample index definition looks as follows: https://gist.github.com/dominique-pfister/92cb67b6f95e1edee6a7d6508b124039\n\nThe select property is a CSS selector that grabs HTML elements out of your document. To verify that a CSS selector entered is selecting what you expect, you can test it in your browser's Javascript console, e.g. for the author selector shown above, enter the following expression:\n\ndocument.querySelectorAll('main > div:nth-of-type(3) > p:nth-of-type(1)');\n\nNote, that not all CSS selectors are supported. Internally, we use a library called hast-util-select, and the list of supported selectors can be found here: https://github.com/syntax-tree/hast-util-select#support\n\nThe value or values property contains an expression to apply to all HTML elements selected. The property name value is preferred when you need a string, values on the other hand provides you with an array of all the matches found. The expression can contain a combination of functions and variables:\n\ninnerHTML(el)\n\nReturns the HTML content of an element.\n\ntextContent(el)\n\nReturns the text content of the selected element, and all its descendents.\n\nattribute(el, name)\n\nReturns the value of the attribute with the specified name of an element.\n\nmatch(el, re)\n\nMatches a regular expression containing parentheses to capture items in the passed element. In the author example above, the actual contents of the <p> element selected might contain by John Smith, so it would capture everything following by .\n\nwords(el, start, end)\n\nUseful for teasers, this selects a range of words out of an HTML element.\n\nreplace(el, substr, newSubstr)\n\nReplaces all occurrences of a substring in a text with a replacement.\n\nparseTimestamp(el, format)\n\nParses a timestamp given as string, and returns its value as number of seconds since 1 Jan 1970.\n\ndateValue(el, format)\n\nParses a timestamp given as string, and returns its value as serial number, where January 1, 1900 is serial number 1. For more information see DATEVALUE function\n\nel\n\nReturns the HTML elements selected by the select property.\n\npath\n\nReturns the path of the HTML document being indexed.\n\nheaders[name]\n\nReturns the value of the HTTP response header with the specified name, at the time the HTML document was fetched.\n\nThe full definition of the helix-query.yaml is available here: https://github.com/adobe/helix-shared/blob/main/docs/indexconfig.md","lastModified":"1676024370"},{"path":"/docs/manifesto","title":"The Helix Manifesto","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"We will work as a meritocracy, input from others, and reviewing PRs and contributing to other projects is a top priority.","content":"The Helix Manifesto\n \nThe Helix PACT is:\n \nProduct Experience #p Architecture & Technology #a Culture & Team #c Tools of the trade #t\n \nOpen Meritocracy #c\n \n\nWe will work as a meritocracy, input from others, and reviewing PRs and contributing to other projects is a top priority.\n\n \nOpen Source #c\n \n\nIf we don't have a good reason why something should be private, it should be public. All new repos, live on public github.\n\n \nDiversity #c\n \n\nWe are a diverse team in every respect.\n\n \nNo Meetings #t\n \n\n(Virtual) Get-togethers, Show-&-Tells and Hackathons only.\n\n \nMore code, less blah, blah #c\n \n\nCode wins. Everybody codes. Commits.\n\n \nBeautiful Creations #p\n \n\nWell designed, beautiful output.\n\n \nIntuitive, Simple & Consistent #p\n \n\nIn that order.\n\n \nAvailable, Secure, Compliant #a #p\n \n\nAlways.\n\n \nOps reliability wins #a\n \n\nsimple, Fast and Up beats elegant.\n\n \nGlobal By Design #p\n \n\nAs global as the web with regards to languages, delivery, and performance\n\n \nLatency is not an option. #p\n \n\nUncached things are fast. <300ms fast. always.\n\n \nAPIs first #a\n \n\nEverything has an API, REST of course.\n\n \nServerless #a\n \n\nPeriod.\n\n \nDevOps: Service, not Software #a\n \n\nThe software is secondary, what we build is a service. Pager Duty for everyone.\n\n \nSlack, GitHub issues, email archive #t\n \n\nDiscussions and decisions are open, asynchronous and archived.\n\n \nCI/CD #t\n \n\nResults of commits can be seen in a production environment in 60 seconds or less.\n\n \nMVP Done Right\n \n\nIt's \"minimum\" when the team has doubts that it could work. It's viable when users don't care and use it anyway.\n\n \nClosed Loop #c\n \n\nListen closely to customer and user feedback. Measure qualitatively and quantitatively.\n\n \nReluctant Dictator #c\n \n\nWhether he wants it or not, the dictator has the last word on product and architecture\n\n \nCalibrated Risk-Taking #c\n \n\nIf we don’t make a wrong decision once in six months, we are not ambitious enough. (Or self-critical)\n\n \nGet Jobs Done #p\n \n\nThe goal of the service is not to deliver features, but to get jobs done for our users and customers.\n\n \nExtensible Delivery #p\n \n\nURI, CSS, Client Code ... Edge ... (Server Code?)\n\n \nEmbrace Authoring where it happens #p\n \n\nGithub, Google Drive and One Drive.\n\n \nJavaScript and Python #a\n \n\nOn the server-side JavaScript and Python are used for the respectively intuitive payloads.\n\n \nMobile first #a\n \n\nNative.\n\n \nCopy/Paste not drag and drop #a\n \n\nRemember a good drag and drop experience on mobile?\n\n \nFrying Architecture #a\n \n\nOutput is assembled on request.\n\n \nServiceful #a\n \n\nMake maximum use of available services.\n\n \nLighthouse Score #a\n \n\nThe goal is 100. Don't give it up.\n\n \nLean and Mean #a\n \n\nLess code is better. Actively manage the dependency graph to an absolute minimum.\n\n \nOpinionated, but Open #a\n \n\na.k.a. polished, but tweakable.\n\n \nLocal Development #t\n \n\nSupport for simple local development is imperative. Low entry barrier.\n\n \nAI/ML #t\n \n\nPower content, workflows, designs, and operations.\n\n \nDon't let your doc/sheet get weird #a\n \n\nAll documents (md, docx, gdoc, xlsx, sheets) should read well and intuitive when viewed/edited through their native interface.\n\n \nNobody designs a list view before 2022 #p\n \n\nLet's design interfaces that are bold now, we can go back to safe and boring later on.\n\n \nIE11 is not supported #p\n \n\nWe will put no effort into making our code compatible with IE.","lastModified":"1664375453"},{"path":"/docs/manual-forms-sheet-setup","title":"Manual Forms Sheet Setup","image":"/docs/media_18612115e4e3f4c51ff58ca04efa6ce3a8d2dec8b.png?width=1200&format=pjpg&optimize=medium","description":"Learn how to manually set up your sheet for use with the Helix forms service.","content":"Manual Forms Sheet Setup\n \n\nThis document explains how to manually set up your sheet for use with the Helix forms service.\n\n \n\nNote: If you are creating the headers manually the header names should exactly match the name of the properties in the form data.\n\n \nManual header creation in Excel\n \n\nTo manually set up your sheet in excel, first create a Table on the ‘incoming’ sheet by clicking the Table button under the Insert menu in Excel.\n\n \n\n     \n\n \n\nChange the heading of each column in the table to match the properties in your data. To create more columns right click the table and select ‘Table Columns to the Left’ from the Insert menu.\n\n \n\n     \n\n \n\nThe name of the table must be set to ‘intake_form’. To change the name of the table select it and then choose ‘Table Design’ from the top menu bar.\n\n \n\n     \n\n \n\nThen change the name of the table from ‘Table1’ to ‘intake_form’.\n\n \n\n     \n\n \n\nYou should also create a new sheet in the workbook called ‘helix-default’, the data in this sheet is what will be returned when you make a GET request to your sheet. This is a great place to use formulas in spreadsheets to summarize the data from the `incoming` sheet.\n\n \n\nNote: The `helix-default` sheet should never contain any personally identifiable information or other data you are not ok with being publicly accessible.\n\n \n\nIf you would like to get notifications in slack when data is ingested you will need to create another sheet called ‘slack’. In this sheet you will need to create another Table called ‘slack with the following columns.\n\n \n\n     \n\n \n\nFor details on what values to enter in the slack table refer back to the Helix Forms Service documentation.\n\n \nManual header creation in Google Sheets\n \n\nTo manually setup a Google Sheets just add the property names to the first row of the incoming sheet.      \n\n \n\nNote: You can add alternating row colors by holding down shift and selecting the column Ids (in the example above A and B) and then choosing Format -> Alternating colors from the top menu.\n\n \n\nYou should also create a new sheet in the workbook called ‘helix-default’, the data in this sheet is what will be returned by making a GET request to your sheet. This is a great place to use formulas in spreadsheets to summarize the data from the `incoming` sheet.\n\n \n\nNote: The `helix-default` sheet should never contain any personally identifiable information or other data you are not ok with being publicly accessible.\n\n \n\nIf you would like to get notifications in slack you will need to create another sheet called ‘slack’, in this sheet you will need to create the following headers.\n\n \n\n     \n\n \n\nFor details on what values to enter in the slack table refer back to the Helix Forms Service documentation.","lastModified":"1664375453"},{"path":"/docs/migrate-from-hlx2","title":"Migrate your Helix 2 project","image":"/docs/media_168485596b6f809adf6f2562d84a222e4595a735e.png?width=1200&format=pjpg&optimize=medium","description":"Helix 3 delivers the core feature set of Helix (high-performance websites with low code and zero-friction authoring) in a simplified architecture that optimizes stability and ...","content":"Migrate your Helix 2 project\n \n\nHelix 3 delivers the core feature set of Helix (high-performance websites with low code and zero-friction authoring) in a simplified architecture that optimizes stability and availability.\n\n \n\nHelix 2 is no longer supported, and existing sites may stop working.\n\n \n\nThe following steps are designed to help you migrate an existing project over from Helix 2 to Helix 3 so you can continue to use it.\n\n \n1. Add Helix Bot\n \nShare your repository with the Helix Bot. If you belong to one or more organizations, you will have multiple options. Pick the profile or organization where you created the repo for your project.\n        Pick the repository you’re using for your project.\nNote: Do not select “All repositories”!\n        After you save, the Helix Bot will transparently watch for changes made to the repo and make them available to your website.\n \n2. Helix Sidekick\n \n\nA Helix 2 sidekick is incompatible with Helix 3 and will have to be replaced.\n\n \nClick the Share icon at the top right of your sidekick to copy the sharing URL and paste it in your browser’s address bar, or visit the Sidekick page, enter your GitHub repo URL and click the “Go” button:\n        Follow the installation instructions to install the sidekick either as a browser extension or a bookmarklet.\n \n3. Preview your pages\n \n\nIn Helix 3, your content will have to be previewed at least once before it can be browsed.\n\n \n \n\nGo to the source document for a page in SharePoint or Google Drive and open the new sidekick.\n      \n\n   \n\nClicking “Preview” will take you to your page’s preview URL.\nAs you can see, the Helix 3 URL format is: https://{branch}--{repo}--{username}.hlx3.page{path-to-page}\n      \n\n   \n\nInspect your page to make sure everything looks as you’d expect – just faster :)\n\n \n \n4. Publish your pages\n \n\nIn Helix 3, every site automatically gets a live environment showing the published content. It is fully cached and can be used as the origin of any CDN:\nhttps://{branch}--{repo}--{username}.hlx.live{path-to-page}\n\n \n\nTo publish content, open the sidekick on the preview URL and click “Publish”. This will make the content as previewed available in the live environment and redirect you there, or – if configured – to the production URL.\n\n \n5. Unsupported features\n \n\nWe decided to drop a few things in Helix 3 for the sake of simplicity and performance:\n\n \nServer-side embeds and data embeds are no longer supported. This means that links pointing to Helix or 3rd party content will no longer be automatically embedded in the output of your page. We recommend fetching and including URLs on the client side instead. Here’s an example for same-site includes, and another one for 3rd party embeds. In Helix 3, URLs of HTML pages are extension-less by default. You can no longer request a page with a .html extension. header.md and footer.md are no longer supported. helix-markup.yaml is no longer supported. We recommend making all DOM manipulations on the client side. helix-redirects.yaml is no longer supported. Instead, you can now add a redirects spreadsheet in the root of your content with a “Source” and a “Destination” column:\n       \n \n6. Best practices\n \nFor the best performance and developer experience, we recommend using the Helix Project Boilerplate repo as a starting point. It provides an OOTB loading mechanism optimized for a flawless lighthouse score from the start, so developers can fully focus on project functionality and styling. Custom functionality should be implemented as blocks. Blocks can be loaded based on the content as well as created synthetically (“auto-blocking”).\n \n\nThat’s it! We wish you a lot of fun with your Helix 3 project…","lastModified":"1664375453"},{"path":"/docs/setup-byo-cdn-push-invalidation-for-akamai","title":"Setup push invalidation","image":"/docs/media_1be270067eac8e593a2e8d42b39929f2f538180bc.png?width=1200&format=pjpg&optimize=medium","description":"Franklin push invalidation automatically purges content on the customer's production CDN (e.g. www.yourdomain.com), whenever an author publishes content changes.","content":"Setup push invalidation\n \n\nFranklin push invalidation automatically purges content on the customer's production CDN (e.g. www.yourdomain.com), whenever an author publishes content changes.\n\n \n\nContent is purged by url and by cache tag/key.\n\n \n\nPush invalidation is enabled by adding specific properties to the project's configuration (an Excel workbook named .helix/config.xlsx in Sharepoint or a Google Sheet named .helix/config in Google Drive).\n\n \n\nConfiguration properties:\n\n    key\t value\t comment\n  cdn.prod.host\t <Production Host>\t Host name of production site, e.g. www.yourdomain.com\n  cdn.prod.type\t akamai\t \n  cdn.prod.endpoint\t <host>\t Fast Purge API credentials\n  cdn.prod.clientSecret\t <client_secret>\t Fast Purge API credentials\n  cdn.prod.clientToken\t <client_token>\t Fast Purge API credentials\n  cdn.prod.accessToken\t <access_token>\t Fast Purge API credentials    \n\nFranklin push invalidation uses the Akamai Fast Purge API, specifically Delete by URL and Delete by cache tag.\n\n \n\nThe Fast Purge API credentials consist of\n\n \nhost = akaa-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.luna.akamaiapis.net\nclient_token = akab-XXXXXXXXXXXXXXXX-XXXXXXXXXXXXXXXX\nclient_secret = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\naccess_token = akab-XXXXXXXXXXXXXXXX-XXXXXXXXXXXXXXXX\n\n \n\nThey can be generated by following the instructions at Create an API client with custom permissions.\n\n \nGo to Identity & Access Management:\n \n\n     \n\n \n\nCreate API client:\n \n\n     \n\n \n\n     \n\n      \n\n \n\nRequired group/role permissions:\n\n \n\n     \n\n \n\nYou can validate the credentials with this tool.","lastModified":"1671212464"},{"path":"/docs/setup-byo-cdn-push-invalidation-for-cloudflare","title":"Setup push invalidation","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"Franklin push invalidation automatically purges content on the customer's production CDN (e.g. www.yourdomain.com), whenever an author publishes content changes.","content":"Setup push invalidation\n \n\nFranklin push invalidation automatically purges content on the customer's production CDN (e.g. www.yourdomain.com), whenever an author publishes content changes.\n\n \n\nContent is purged by url and by cache tag/key.\n\n \n\nPush invalidation is enabled by adding specific properties to the project's configuration (an Excel workbook named .helix/config.xlsx in Sharepoint or a Google Sheet named .helix/config in Google Drive).\n\n \n\nConfiguration properties:\n\n    key\t value\t comment\n  cdn.prod.host\t <Production Host>\t Host name of production site, e.g. www.yourdomain.com\n  cdn.prod.type\t cloudflare\t \n  cdn.prod.plan\t e.g. free\t  \n\nvalues: free, pro, business, enterprise\n\n \n\ndefault: free\n\n \n\nonly enterprise plan supports purge-by-tag\n\n \n  cdn.prod.zoneId\t <Cloudflare Zone ID>\t ID of production zone\n  cdn.prod.apiToken\t <Cloudflare API Token>\t     \n\nTo create an API Token,\n\n \ngo to API Tokens click on \"Create Token\", go to \"Create Custom Token\" at the bottom and click on \"Get started\" enter a token name (e.g. \"Production Site Purge Token\"), Permissions: \"Zone\", \"Cache Purge\", \"Purge\" Zone Resources: \"Include\", \"Specific zone\", \"<your production zone>\" click on \"Continue to summary\" click on \"Create Token\", copy the generated token value.\n \n\nNote that only sites on the enterprise plan will be surgically purged by url and cache key. A Purge All will be performed instead on non-enterprise sites every time an author publishes a content change.\n\n \n\nYou can validate the credentials with this tool.","lastModified":"1671212593"},{"path":"/docs/setup-byo-cdn-push-invalidation-for-cloudfront","title":"Setup push invalidation","image":"/docs/media_1618a25087ddc6edc466b8efd94593ef2291052cc.png?width=1200&format=pjpg&optimize=medium","description":"Franklin push invalidation automatically purges content on the customer's production CDN (e.g. www.yourdomain.com), whenever an author publishes content changes.","content":"Setup push invalidation\n\nFranklin push invalidation automatically purges content on the customer's production CDN (e.g. www.yourdomain.com), whenever an author publishes content changes.\n\nContent is purged by url and by cache tag/key.\n\nPush invalidation is enabled by adding specific properties to the project's configuration (an Excel workbook named .helix/config.xlsx in Sharepoint or a Google Sheet named .helix/config in Google Drive).\n\nNB: CloudFront does NOT support purging by cache tag/key. Purge by cache tag/key always triggers a purge all.\n\nConfiguration properties:\n\nkey\t value\t comment \n cdn.prod.host\t <Production Host>\t Host name of production site, e.g. www.yourdomain.com \n cdn.prod.type\t cloudfront\t \n cdn.prod.distributionId\t <Cloudfront Distribution ID>\t \n cdn.prod.accessKeyId\t <AWS Access key ID>\t AWS credentials \n cdn.prod.secretAccessKey\t <AWS Secret access key>\t AWS credentials\nTo create the AWS credentials:\n\n\nIn the AWS Console, open the IAM dashboard:\n\nSelect Policies -> Create policy:\n\nSelect “CloudFront” as Service, “CreateInvalidation” as Action, then click on “Add ARN”:\n\nEnter you Distribution Id and click on “Add”:\n\n\n\nProceed to “Next: Tags” and then “Next: Review”.\n\nEnter a name for the new policy, e.g. “FranklinInvalidate<Your Distribution Id>”, and click on “Create policy”:\n\n\n\nIn the IAM dashboard, select Users -> Add users:\n\n\nEnter a user name (e.g. “FranklinInvalidator”) and click on Next:\n\nOn the “Set permissions” pane, select “Attach policies directly” and select the newly created policy (“FranklinInvalidate<Your Distribution Id>” in our example):\n\nProceed to the next step, click on “Create user” end then “View user”:\n\nSelect the “Security credentials” tab and click on “Create access key”:\n\n\n\nSelect “Third-party service”, click the checkbox and proceed to “Next”:\n\nFinally, copy the Access key ID and Secret access key values:\n\nYou can validate the credentials with this tool.","lastModified":"1674238079"},{"path":"/docs/setup-byo-cdn-push-invalidation-for-fastly","title":"Setup push invalidation","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"Franklin push invalidation automatically purges content on the customer's production CDN (e.g. www.yourdomain.com), whenever an author publishes content changes.","content":"Setup push invalidation\n \n\nFranklin push invalidation automatically purges content on the customer's production CDN (e.g. www.yourdomain.com), whenever an author publishes content changes.\n\n \n\nContent is purged by url and by cache tag/key.\n\n \n\nPush invalidation is enabled by adding specific properties to the project's configuration (an Excel workbook named .helix/config.xlsx in Sharepoint or a Google Sheet named .helix/config in Google Drive).\n\n \n\nConfiguration properties:\n\n    key\t value\t comment\n  cdn.prod.host\t <Production Host>\t Host name of production site, e.g. www.yourdomain.com\n  cdn.prod.type\t fastly\t \n  cdn.prod.serviceId\t <Fastly Service ID>\t Service ID of production service\n  cdn.prod.authToken\t <Fastly API Token>\t     \n\nTo create a Fastly API Token,\n\n \ngo to Personal API Tokens, click on \"Create Token\", enter a name (e.g. \"Production Site Purge Token\"), select \"A specific service\" and your production service from the drop-down list, check the \"Purge select content (purge_select) — Purge by URL or surrogate key\" check box, select \"Never expire\", click on \"Create Token\", copy the generated token value shown in the pop-up window.\n \n\nYou can validate the credentials with this tool.","lastModified":"1671212790"},{"path":"/docs/setup-byo-cdn-push-invalidation","title":"Configuring push invalidation for BYO production CDN","image":"/docs/media_1be270067eac8e593a2e8d42b39929f2f538180bc.png?width=1200&format=pjpg&optimize=medium","description":"Franklin push invalidation automatically purges content on the customer's production CDN (e.g. www.yourdomain.com), whenever an author publishes content changes.","content":"Configuring push invalidation for BYO production CDN\n \n\nFranklin push invalidation automatically purges content on the customer's production CDN (e.g. www.yourdomain.com), whenever an author publishes content changes.\n\n \n\nContent is purged by url and by cache tag/key.\n\n \n\nSetting up push invalidation requires 2 steps:\n\n \nConfiguration Opt-In Request Header\n \nConfiguration\n \n\nPush invalidation is currently supported for CDNs of the following vendors:\n\n \nFastly Akamai Cloudflare CloudFront\n \n\nPush invalidation is enabled by adding specific properties to the project's configuration (an Excel workbook named .helix/config.xlsx in Sharepoint or a Google Sheet named .helix/config in Google Drive).\n\n \n\nThe following sections describe the vendor specific properties required to set up push invalidation.\n\n \nFastly\n \n\nConfiguration properties:\n\n    key\t value\t comment\n  cdn.prod.host\t <Production Host>\t Host name of production site, e.g. www.yourdomain.com\n  cdn.prod.type\t fastly\t \n  cdn.prod.serviceId\t <Fastly Service ID>\t Service ID of production service\n  cdn.prod.authToken\t <Fastly API Token>\t     \n\nTo create a Fastly API Token,\n\n \ngo to Personal API Tokens, click on \"Create Token\", enter a name (e.g. \"Production Site Purge Token\"), select \"A specific service\" and your production service from the drop-down list, check the \"Purge select content (purge_select) — Purge by URL or surrogate key\" check box, select \"Never expire\", click on \"Create Token\", copy the generated token value shown in the pop-up window.\n \n\nYou can validate the credentials with this tool.\n\n \nAkamai\n \n\nConfiguration properties:\n\n    key\t value\t comment\n  cdn.prod.host\t <Production Host>\t Host name of production site, e.g. www.yourdomain.com\n  cdn.prod.type\t akamai\t \n  cdn.prod.endpoint\t <host>\t Fast Purge API credentials\n  cdn.prod.clientSecret\t <client_secret>\t Fast Purge API credentials\n  cdn.prod.clientToken\t <client_token>\t Fast Purge API credentials\n  cdn.prod.accessToken\t <access_token>\t Fast Purge API credentials    \n\nFranklin push invalidation uses the Akamai Fast Purge API, specifically Delete by URL and Delete by cache tag.\n\n \n\nThe Fast Purge API credentials consist of\n\n \nhost = akaa-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.luna.akamaiapis.net\nclient_token = akab-XXXXXXXXXXXXXXXX-XXXXXXXXXXXXXXXX\nclient_secret = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\naccess_token = akab-XXXXXXXXXXXXXXXX-XXXXXXXXXXXXXXXX\n\n \n\nThey can be generated by following the instructions at Create an API client with custom permissions.\n\n \nGo to Identity & Access Management:\n \n\n     \n\n \n\nCreate API client:\n \n\n     \n\n \n\n     \n\n      \n\n \n\nRequired group/role permissions:\n\n \n\n     \n\n \n\nYou can validate the credentials with this tool.\n\n \nCloudflare\n \n\nConfiguration properties:\n\n    key\t value\t comment\n  cdn.prod.host\t <Production Host>\t Host name of production site, e.g. www.yourdomain.com\n  cdn.prod.type\t cloudflare\t \n  cdn.prod.plan\t e.g. free\t  \n\nvalues: free, pro, business, enterprise\n\n \n\ndefault: free\n\n \n\nonly enterprise plan supports purge-by-tag\n\n \n  cdn.prod.zoneId\t <Cloudflare Zone ID>\t ID of production zone\n  cdn.prod.apiToken\t <Cloudflare API Token>\t     \n\nTo create an API Token,\n\n \ngo to API Tokens click on \"Create Token\", go to \"Create Custom Token\" at the bottom and click on \"Get started\" enter a token name (e.g. \"Production Site Purge Token\"), Permissions: \"Zone\", \"Cache Purge\", \"Purge\" Zone Resources: \"Include\", \"Specific zone\", \"<your production zone>\" click on \"Continue to summary\" click on \"Create Token\", copy the generated token value.\n \n\nNote that only sites on the enterprise plan will be surgically purged by url and cache key. A Purge All will be performed instead on non-enterprise sites every time an author publishes a content change.\n\nYou can validate the credentials with this tool.\n\n \nCloudFront\n \n\nNB: CloudFront does NOT support purging by cache tag/key. Purge by cache tag/key always triggers a purge all.\n\nConfiguration properties:\n\n    key\t value\t comment\n  cdn.prod.host\t <Production Host>\t Host name of production site, e.g. www.yourdomain.com\n  cdn.prod.type\t cloudfront\t \n  cdn.prod.distributionId\t <Cloudfront Distribution ID>\t \n  cdn.prod.accessKeyId\t <AWS Access key ID>\t AWS credentials\n  cdn.prod.secretAccessKey\t <AWS Secret access key>\t AWS credentials    \nTo create the AWS credentials:\n\n \n\nIn the AWS Console, open the IAM dashboard:\n\n \n\n     \n\n \n\nSelect Users -> Add users:\n      \n\n \n\n     \n\n \n\nEnter a user name and check “Access key - Programmatic access”:\n\n \n\n     \n\n \n\nOn the “Set permissions” pane, click on “Create group”:\n\n \n\n     \n\n \n\nEnter a group name and select the CloudFrontFullAccess policy:\n\n \n\n           \n\n \n\nCreate the user:\n\n \n\n     \n\n \n\nFinally, copy the Access key ID and Secret access key values:\n\n \n\n     \n\n \n\nYou can validate the credentials with this tool.\n\n \nOpt-In Request Header\n \n\nThe production CDN needs to send the following opt-in header to the Franklin origin in order to enable long cache TTLs:\n\n \n\nX-Push-Invalidation: enabled","lastModified":"1671212116"},{"path":"/docs/sidekick-extension","title":"Installing the AEM Sidekick","image":"/docs/media_1d153a911ba86477a04a597342a542bbc3ed00972.png?width=1200&format=pjpg&optimize=medium","description":"The AEM sidekick provides content authors with a toolbar offering context-aware options so that they can edit, preview, and publish their content directly from the ...","content":"Installing the AEM Sidekick\n\nThe AEM sidekick provides content authors with a toolbar offering context-aware options so that they can edit, preview, and publish their content directly from the pages of your website.\n\nThis document explains how to install and configure the sidekick.\n\nInstallation Options\n\nThe sidekick is available as a browser extension in Chrome-based browsers and Safari and can be installed in a number of ways.\n\nUse the sidekick configurator. Manually install the sidekick as you would any other extension If you can not install a browser extension, install the sidekick bookmarklet.\n\nIf you already have the sidekick installed and need help using it, please see the document Using the AEM Sidekick Extension.\n\nUsing the Sidekick Configurator\n\nThe configurator detects your browser and guides you through the installation process.\n\nIn Safari or a Chrome-based browser, navigate to the link https://www.hlx.live/tools/sidekick/ Provide the URL to the GitHub repository of your project and optionally a name for the project and click Go.\nThe sidekick supports multiple projects and providing a descriptive name helps managing the configurations.\nIn the new section Install the Sidekick extension and add this project that appears, click the Install Sidekick Extension for Chrome or Install Sidekick Extension for Safari.\n The page will then open the App Store or Chrome Web Store as appropriate where you can install the extension as appropriate to your OS. Return to the page of the configurator and click Add project.\n The configurator adds the project to the extension. You are now ready to use the extension!\n\nIf you have any issues installing the extension, please review the instructions in the section Manually Installing the Sidekick.\n\nManually Installing the Sidekick\nChrome\nNavigate to the sidekick extension in the Chrome Web Store. Click the Add to Chrome button. Click Add extension to confirm the installation. Click the new Adobe Experience Cloud icon next to Chrome’s address bar and click the Pin icon to keep it visible.\nSafari\nNavigate to the sidekick extension in the App Store. Click the Install button. Enable the extension.\nDesktop Safari\nOpen Safari. Go to Settings. Click Extensions. check the box next to the sidekick extension.\nMobile Safari\nOpen Settings Tap Safari Then tap Extensions. Toggle the sidekick extension.\nMake sure the extension is allowed access to all websites.\nAdding Your Project\n\nThere are multiple ways to add projects to the sidekick extension:\n\n1. Sidekick Configurator\nSee the section Using the Sidekick Configurator.\n2. Sharing URL\nNavigate to a sharing URL starting with https://www.hlx.live/tools/sidekick/?... Click the blue Add Project button.\nAlternatively, you can click the Adobe Experience Cloud icon next to your browser’s address bar and select Add Project from the context menu.\nA dialog will be shown for confirmation. Click OK to continue.\n\nA colleague on the project can provide you with a sharing URL. See the document Using the AEM Sidekick Extension for details.\n\n3. Project URL (Desktop Only)\nNavigate to a project URL with a host name like this: https://main–repo–owner.hlx.page/ Click the Adobe Experience Cloud icon next to your browser’s address bar and select Add Project from the context menu. A dialog will be shown for confirmation. Click OK to continue.\n4. GitHub Repository URL (Desktop Only)\nNavigate to a GitHub repository starting with https://github.com/... Click the Adobe Experience Cloud icon next to your browser’s address bar and select Add Project from the context menu. A dialog will be shown for confirmation. Click OK to continue.\n5. Options Page\n\nThe options page lists all project configurations and allows you to add, edit or delete them.\n\nGo to the options page:\nChrome: Right-click the Adobe Experience Cloud icon next to the address bar and select Options from the context menu. Safari (desktop): Right-click the Adobe Experience Cloud icon next to the address bar and select Manage Extension… In the extensions dialog, click Preferences. Safari (mobile): Open Settings and tap Safari > Extensions > AEM Sidekick > Extension settings.\nAdd a project configuration using one of the two following methods:\nAdd via sharing URL: the project configuration will be retrieved from the parameters contained in the share URL. Add manually: enter the GitHub repository URL and other optional parameters for your project.\nInstalling the Sidekick Bookmarklet\n\nIf you are unable to install an extension in your browser, or if you use a browser that is not currently supported by the sidekick extension, you can use a bookmarklet.\n\nA bookmarklet is a browser bookmark or favorite containing JavaScript commands that add new features to the browser. The sidekick bookmarklet adds the features of the sidekick without requiring any installation, which can be useful to some users.\n\nBecause the sidekick extension remembers whether it is open or closed on a given content page, Adobe recommends installing the extension if possible. The bookmarket must always be manually opened and closed on your content pages.\n\nTo install the bookmarklet:\n\nIn your browser, navigate to the link https://www.hlx.live/tools/sidekick/ Provide the URL to the GitHub repository of your project and optionally a name for the project and click Go.\nThe sidekick supports multiple projects and providing a descriptive name helps managing the configurations.\nA new section called Install Sidekick Bookmarklet for this project appears on the page along with a button.\n Drag the button to your bookmarks or favorite toolbar. Click the bookmarklet in the bookmarks or favorites toolbar to toggle it.\nUse the Sidekick Extension\n\nPlease see the document Using the AEM Sidekick Extension to learn how to use the sidekick.","lastModified":"1680601650"},{"path":"/developer/best-practices","title":"Best Practices for Developers on Franklin","image":"/developer/media_125ee1e7dbebdfdac6eb972fdbeff2a361d4e85cf.png?width=1200&format=pjpg&optimize=medium","description":"If you’ve followed the Franklin Tutorial, you already know the basics of developing for Franklin. In this document, you will learn how to follow best ...","content":"Best Practices for Developers on Franklin\n\nIf you’ve followed the Franklin Tutorial, you already know the basics of developing for Franklin. In this document, you will learn how to follow best practices and create sites that are fast and responsive, without having to reinvent the wheel.\n\nSections, Blocks, Default Content\n\nA Franklin page as authored in Word or Gdoc is using the well understood semantic model of things like headings, body text, lists, images, links etc. that is shared between HTML, markdown and gdoc / word. We call this “default content”. In an ideal situation one would leave as much of the content authored as “default content” as possible, as this is the natural way to treat documents.\n\nOn top of that Franklin has the concept of “Sections” of a page, separated by “Horizontal Rules” or --- to group certain elements of a page together. There may be both semantic and design reasons to group content together, a simple case could be that a section of a page has a different background color:\n\nBeyond that Franklin introduces a concept of a “Block” which is authored as a table with a heading (first row) that identifies the type of block. This concept is the easiest approach to componentize your code. (see below).\nSections can comprise multiple blocks. Blocks should never be nested as it makes things very hard to use for authors.\n\nPage and Section Metadata\n\nFranklin supports page level metadata in a Metadata block that can reside anywhere on the page, it is commonly located at the very bottom of the page. The metadata block lets you govern well-known metadata (eg. og:title, og:image, description) through via “title”, “image”, “description” and it also allows to specify custom meta tags that will be rendered into the html <head> as <meta> tags.\nPage level metadata can also be controlled by a metadata[.xlsx] spreadsheet found in the root folder on sharepoint or gdrive of a project.\n\nSection metadata is specified as using the “Section Metadata” block and is applied to the respective data-* attributes. The only well-known section metadata property is “Style” which will be turned into css classes added to the containing Section.\n\nTemplates and Themes\n\nA special case of Page metadata are “Template” and “Theme”, which both result in an addition to the body class list, and therefore can be used for styling. The difference is really based in semantics and how authors intuitively think of the two concepts. Themes really suggest a different styling (eg. different CSS) while Templates are thought of as pages that have a different structure. Templates therefore are very useful to reduce the amount of blocks that an author has to create and allow for a more versatile use of default content in combination with AutoBlocking.\nThis means that a page that has a particular Template can be authored as mostly or exclusively default content, and via auto blocking the default content will be turned into blocks that are developed and loaded as if the author put specific blocks on the page without having to impact the authoring ergonomics.\n\nGitHub repository\n\nWe recommend getting started using the Franklin Project Boilerplate repository as a template, but of course you can also start one from scratch. Franklin will assume your code repository is public, your default branch is main, and the only mandatory file is fstab.yaml.\n\nCode Structure\n\nThe Franklin Project Boilerplate will provide you with a clean basic code structure, the main folders being:\n\nblocks: This folder is where your block code is meant to go. Each block has its own distinct folder containing a JS and a CSS file with the same name. scripts: This folder is meant for global scripts, most importantly the “entry point” scripts.js module (ESM) referenced in the head.html. styles: This folder is meant for global CSS files. We recommend to split your CSS into a styles.css for everything “above the fold” and lazy-styles.css for everything else which will get loaded lazily (see also chapter Build for fast and great Experiences below). head.html: This is an HTML snippet that will be injected into every <head> tag of your project’s HTML output. It is a convenient place to load JS modules (ESM), favicon, as well as your main CSS file. You can also add generic metadata which should appear on every page.\nBasic Franklin JavaScript\n\nThe scripts.js contains a small number of out of the box functions that facilitate client-side DOM manipulation and order of further script execution (e.g. loading blocks or the martech stack) which we consider useful and necessary for all Franklin projects.\n\nBlocks\n\nFranklin will automatically attempt to load a JS and CSS file for every type of block it encounters in the page load process. Each block has its dedicated folder, and a JS and CSS file with the same name:\n\nblocks\n  example\n    example.css\n    example.js\n\n\nThe JS file should be a module (ESM) exporting a default function called decorate(block). where you can freely manipulate the block’s DOM structure based on the content inside.\n\nThe CSS file should contain self-contained rules for this block and its container element only.\n\nSome blocks will only require a JS or a CSS file, in which case the other file can remain empty. If you don’t create an empty file, you will see 404s in the developer console, which is unsightly.\n\nFor more on blocks, see Exploring Blocks.\n\nTooling\n\nAs tempting as it may be for a web developer to introduce an extensive build tool set, we recommend holding off on that as long as possible. The main reasons to introduce build tooling are a better user experience (by achieving a higher Lighthouse Score) and better developer experience (by modularization of the code), both of which is possible in Franklin with its block approach.\n\nBuild for fast and great Experiences\n\nFranklin projects are built with great attention to the customer experience, think of an experience score. Contributing factors and proxies for great experiences are (mobile) lighthouse score and core web vitals. We recommend that as part of the CI process the lighthouse score is measured against Google's pagespeed insights service and a score below 100 or a CLS score above 0.0 fails the build.\nIt is dramatically easier to keep a score at 100 than to have to go in and clean it up later.\n\nTo achieve a great experience with a lighthouse score of 100 being in control of every aspect of is imperative, which is usually something developers give up when they use third party frameworks or libraries, so we recommend to be extremely careful with your dependency graph and only use external libraries and frameworks where necessary.\n\nOur approach: ELD loading\n\nWe found that dissecting the payload that's on a web page into three phases makes it relatively straight-forward to achieve a clean lighthouse score and therefore hopefully a great customer experience.\n\nThe three phase loading approach divides the payload and execution of the page into three phases, divided into a first phase E (Eager) which contains everything that's needed to get to the LCP, a second phase L (Lazy) which contains everything that is controlled by the project and largely served from the same origin and a phase D (Delayed) which contains everything else, think 3rd party tags or assets that are not material to experience.\n\nPhase E: Eager\n\nIn the \"Eager\" phase everything that's needed to be loaded for the true LCP to be displayed is loaded. In a Franklin project this usually consists of the markup, the styles required above the fold, and a javascript file. For everything in the eager phase it is recommended to use h2 push (or similar) to get them to the browser as quickly as possible (where easily possible).\n\nOften the LCP element may be a responsive hero image, which probably makes the use of h2 push somewhat impractical in most cases, so in that case the LCP event is usually triggered by the image being loaded. Franklin sets the loading preference of the first image on page to \"eager\" by default to help that.\n\nUsually this includes the DOM decoration of all \"Default Content\" above the fold (think a hero or marquee) as well as the blocks that are above the fold, so the CSS can be applied as soon as it is loaded.\n\nThe \"Eager\" is controlled in scripts.js and styles.css. It is not recommended to change something in the first 600 lines of the scripts.js. But then, you might configure the block(s) that can have an impact on the LCP or add some extra required decoration of the DOM. But you need to be really careful with the impact on the performance score.\n\n\nPhase L: Lazy\n\nOnce the \"Eager\" phase is over we enter the \"Lazy\" phase, in which all the portion of the payload that are controlled to the degree that they don't affect Total Blocking Time (TBT) and Time to Interactive (TTI) and in the end (FID), this should include things like loading blocks (js and css) as well as loading all the remaining images according to their loading=\"lazy\" attribute and other javascript libraries that are not blocking. In this phase it would still be advisable that the bulk of payload is coming from the same origin and is controlled by the first party so changes can be made if needed to avoid negative impact on TBT, TTI and FID.\n\nThe \"Lazy\" phase is generally everything that happens in the various blocks you are going to create to cover the project needs.\n\nPhase D: Delayed\n\nThe parts of the payload that fit into the delayed phase are things that don't have an immediate impact to the experience and/or are not controlled by the project and come from third parties. Think of marketing tooling, consent management, extended analytics, chat / interaction modules etc. often deployed through tag management solutions.\n\nIt is important to understand that for the impact on the overall customer experience to be minimized the start of this third phase needs to be significantly delayed. Currently we recommend the beginning of the \"Delayed phase\" to be at least 3s after the LCP event, to leave enough time for the rest of the experience to get settled.\n\nThe \"Delayed\" phase is usually handled in delayed.js and lazy-styles.css.\n\nSpecial Mention for CLS\n\nTo suppress CLS Franklin blocks the display on a section by section basis, and progressively displays a section as soon as all the blocks in a section are loaded. In some cases, it may be useful to create a small section wrapping the LCP to make sure that the LCP is displayed as quickly as possible and is not blocked by other blocks that are in the same section.\n\nSpeed is Green\n\nBuilding websites that are fast, small, and quick to render is not just a good idea to deliver exceptional experiences that make money, it is also one of the best ways to reduce carbon emissions.","lastModified":"1677545093"},{"path":"/developer/block-collection","title":"The Franklin Block Collection","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"This is a collection of blocks considered a part of the Franklin product and are recommended as blueprints for blocks in your project.","content":"The Franklin Block Collection\n\nThis is a collection of blocks considered a part of the Franklin product and are recommended as blueprints for blocks in your project.\n\nThese blocks come from real production Franklin projects. To be a part of this collection, a block needs to have a high use across a number of projects and provide enough abstract functionality and be general enough so it can be reused without having to change the underlying content model.\n\n\nAs the needs and designs of websites change, the block collection will change as well. Additions will be made to reflect emerging needs of projects, but blocks that are not used frequently enough will also be removed (deprecated).\n\nThere are few technical principles for the blocks in the collection:\n\nIntuitive: Content structure that’s intuitive and easy to author Useable: No dependencies, compatible with boilerplate Responsive: Works across all breakpoints Context Aware: Inherits CSS context such text and background colors Localizable: No hard-coded content Fast: No negative performance impact SEO and A11y: SEO friendly and accessible\n\nAll of the blocks can be considered as a basis for your own block development. It is very likely that you will change all the .css and .js code to meet your own project needs. The primary value of these blocks is the content structure they provide.\n\nConsidering that the code of your block will be fully adapted to your project, there is no intent for the blocks in the collection to be backwards compatible to their respective older versions or to make them upgradable.\n\nBoilerplate\n\nThe most commonly used blocks (as well as default content types) are curated in the Franklin Boilerplate and are a part of every Franklin project. For a block to become a part of boilerplate it has to be used by the vast majority of all Franklin projects.\n\nHeadings\n\nDefault Content\n\nDifferent levels of headings provide the semantic backbone of your document\n\nText\n\nDefault Content\n\nBody text or copy with rich semantic formatting options\n\nImages\n\nDefault Content\n\nPictures bring your content alive\n\nLists\n\nDefault Content\n\nOrdered and unordered lists wherever they are needed\n\nLinks\n\nDefault Content\n\nReference other websites or your own content\n\nButtons\n\nDefault Content\n\nCall-to-action buttons and more\n\nCode\n\nDefault Content\n\nHighlight preformatted code snippets in your content\n\nSections\n\nDefault Content\n\nGroup content on your page into sections\n\nIcons\n\nDefault Content\n\nMake your content more interesting with icons\n\nHero\n\nBlock\n\nHero treatment at the top of a page\n\nColumns\n\nBlock\n\nFlexible way to handle multi-column layouts in a responsive way\n\nCards\n\nBlock\n\nList of cards with or without images and links\n\nHeader\n\nBlock\n\nFlexible header and navigation example\n\nFooter\n\nBlock\n\nSimple extensible footer block\n\nMetadata\n\nBlock\n\nAdd metadata to your page where needed\n\nSection Metadata\n\nBlock\n\nHighlight or structure all the content in a section\n\nStyle\nlight\nBlock Collection\n\nThe block collection contains blocks that are used commonly-used, but are not so common to be considered boilerplate. As a rule-of-thumb, to be included in the block collection a block must be used on more than half of all Franklin projects.\n\nThe block collection can be the entry path into boilerplate code. Likewise if a block in the boilerplate is no longer used as much, it can be moved to this collection.\n\nEmbed\n\nBlock\n\nA simple way to embed videos or social media into Franklin pages\n\nFragment\n\nBlock\n\nShare pieces of content across multiple pages\n\nTable\n\nBlock\n\nA way to organize tabular data into rows and columns\n\nThe block collection is continually evolving based on the feedback from the Franklin community. If you think that there is a block that should be included in the block collection please speak to your Franklin contact. Current candidates for inclusion in the block collection include:\n\nVideo Modal Carousel Search Form Social Tabs Accordion Breadcrumb\n\nIf you have immediate need of a block that is not yet part of the collection, it is relatively easy to find Franklin projects on GitHub that have example implementations for all of the above candidates.\n\nStyle\ndark","lastModified":"1677771843"},{"path":"/developer/block-collection/buttons","title":"Buttons","image":"/developer/block-collection/media_1556229d53bb29acfb6a80f421e9ed8c6c51678eb.png?width=1200&format=pjpg&optimize=medium","description":"Websites very often contain buttons, as call to actions or more generically. By default in the Helix Boilerplate project buttons are created as a link ...","content":"Buttons\n \nNotes:\n \n\nWebsites very often contain buttons, as call to actions or more generically. By default in the Helix Boilerplate project buttons are created as a link in a paragraph by itself.\n\n \n\nBold and Italic (<strong> and <em>) and possibly combinations thereof are used to specify certain types of buttons. There are often primary and secondary buttons and the default styling is usually defined for default content and/or specified by a containing block, and Bold and Italic can be used to specify alternative variations of buttons.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nAs Buttons are considered Default Content they are styled in project or block CSS code.\n\n \n\nThere is Javascript code for decoration purposes that is included in the default boilerplate behavior and it usually remains unchanged.\n\n \n\nDecoration Code\n\n \n\nThe CSS Styling is very project specific and gets adjusted as needed for a project or block by block.\n\n \n\nStyling Code\n\n \n\nAll the code above is part of the Helix Boilerplate and does not need to be copied.","lastModified":"1664375453"},{"path":"/developer/block-collection/cards","title":"Cards (Block)","image":"/developer/block-collection/media_1e4a8325a6940af2a80fa1096ee1dc8e75d0cd426.png?width=1200&format=pjpg&optimize=medium","description":"Most responsive websites use Cards as a visual way to reference between different pages or list different concepts.","content":"Cards (Block)\n \nNotes:\n \n\nMost responsive websites use Cards as a visual way to reference between different pages or list different concepts.\n\n \n\nCards generally operate in a feed that has a minimum and a maximum width and depending on the viewport width display a certain number of columns of cards.\nThe card block offers a way for an author to create an unordered list with complex list items containing images, text, and links in an intuitive and easy to use fashion.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nThis code is included in Helix Boilerplate, there is no need to copy it.\n\n \n\nBoilerplate Block Code","lastModified":"1664375453"},{"path":"/developer/block-collection/code","title":"Code","image":"/developer/block-collection/media_168fafa439d9faa02af4803911e75e0503e1fbf2c.png?width=1200&format=pjpg&optimize=medium","description":"Most technical documentation websites (including this one) have the need to display code. Most marketing websites don’t have that requirement, but since there is an ...","content":"Code\n \nNotes:\n \n\nMost technical documentation websites (including this one) have the need to display code. Most marketing websites don’t have that requirement, but since there is an intuitive and simple styling and markup the notion of code elements both inline and preformatted multiline is supported out of the box.\n\n \n\nFormatting something in word or gdoc as a fixed font (eg. Courier New) will automatically output a <code> element or a <code> and <pre> block for multiline.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nAs the code functionality is part of Default Content it is usually really just a matter of styling things according to the project specific CSS rules.\nThis code is part of the Helix Boilerplate so there is no need to copy it.\n\n \n\nSee Boilerplate Styling","lastModified":"1664375453"},{"path":"/developer/block-collection/columns","title":"Columns (Block)","image":"/developer/block-collection/media_16fba78760809adf368fffa86f1a28cfe25c60f48.png?width=1200&format=pjpg&optimize=medium","description":"The Columns block is one of the most frequently used blocks. It offers that author the ability to intuitively describe a desirable desktop layout that ...","content":"Columns (Block)\n \nNotes:\n \n\nThe Columns block is one of the most frequently used blocks. It offers that author the ability to intuitively describe a desirable desktop layout that gets a responsive adaptation for smaller breakpoints.\n\n \n\nMost authors spend the majority of their time on desktop, which makes the visual similarity of a Columns layout in their word processor with the desktop layout of their website intuitive and allows us to take hints from the number of columns that are used in the word or gdoc layout.\n\n \n\nThe most popular use of the Column block is probably to use two columns on desktop and responsively switch to one column on mobile.\nThis block decorates the number of columns in authoring as special CSS class on the block, which allows the developer to style two, three, four etc. columns differently without adding any complexity from a javascript standpoint.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nThis code is included in Helix Boilerplate, there is no need to copy it.\n\n \n\nBoilerplate Block Code","lastModified":"1664375453"},{"path":"/developer/block-collection/embed","title":"Embed (Block)","image":"/developer/block-collection/media_1d667ca59f4baeff7127f7b39a9eee4d4f6a61f38.png?width=1200&format=pjpg&optimize=medium","description":"It is very common on news and blog websites that videos or social media is embedded in a website. The embed block provides a simple ...","content":"Embed (Block)\n \nNotes:\n \n\nIt is very common on news and blog websites that videos or social media is embedded in a website.\nThe embed block provides a simple blueprint with some of the most popular embeds as examples.\nIt is likely that this block will be extended with specific social media, video or other embeddable widgets according to a website’s specific needs.\n\n \n\nWhile it is tempting to add as many embeddable URLs into the embed block as possible, we will try to keep the embed block in the block collection to very commonly used platforms, and therefore keep the block simple and easy to extend.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nThis code is included in Helix Block Collection, simply copying the .css file and the .js file will add this block to your project.\n\n \n\nBlock Code","lastModified":"1664375453"},{"path":"/developer/block-collection/footer","title":"Footer (Block)","image":"/developer/block-collection/media_162b96448d49c1afd64e7f0e41a78f22abac92fd3.png?width=1200&format=pjpg&optimize=medium","description":"The footer block is loaded by default in the helix boilerplate into the <footer> element. Out-of-the-box it provides a simple example for a footer but ...","content":"Footer (Block)\n \nNotes:\n \n\nThe footer block is loaded by default in the helix boilerplate into the <footer> element.\nOut-of-the-box it provides a simple example for a footer but is likely to be extended or adjusted on the per project basis.\n\n \n\nThe footer block is usually not referenced by authors but is loaded automatically on every page.\n\n \n\nThe content for the footer is loaded as a fragment and is by default authored in a footer (or footer.docx) document.\nAs footer structure and designs change rarely and are usually visually very different from the rest of the blocks on a site, it is often a good strategy to divide the content into sections and decorate specific classes onto the sections based on their sequence and apply CSS styling to those classes.\n\n \n\nThe footer document has its own lifecycle and when previewed or published applies to all pages that use a given navigation.\n\n \n\nIt is not uncommon to have multiple footer documents for a site eg. one per locale / language.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nThis code is included in Helix Boilerplate, there is no need to copy it.\n\n \n\nBoilerplate Block Code","lastModified":"1664375453"},{"path":"/developer/block-collection/fragment","title":"Fragment (Block)","image":"/developer/block-collection/media_1a380ecaf3f6c4acfc1a9e23c2000d0d8839ba7bf.png?width=1200&format=pjpg&optimize=medium","description":"Some content may need to be managed in a central location and shared across multiple pages of a website. Every Franklin page can be included ...","content":"Fragment (Block)\nNotes:\n\nSome content may need to be managed in a central location and shared across multiple pages of a website. Every Franklin page can be included in another page as a fragment. The fragment block provides a simple way for authors to reference another Franklin page to be included as a fragment.\n\nWe currently only support including content and blocks from the first section of the fragment page in order to keep the fragment block simple and easy to extend. Additional sections will be ignored.\n\nExample:\n\nSee Live output\n\nContent Structure:\n\nSee Content in Document\n\nSee Fragment Content in Document\n\nCode:\n\nThis code is included in Franklin Block Collection, simply copying the .css file and the .js file will add this block to your project.\n\nBlock Code","lastModified":"1677701977"},{"path":"/developer/block-collection/header","title":"Header (Block)","image":"/developer/block-collection/media_19ce46949a33ba8d0b804ea46c02aa027a2d15e46.png?width=1200&format=pjpg&optimize=medium","description":"The header block is loaded by default in the Franklin boilerplate into the <header> element. Out-of-the-box it provides code for a responsive navigation but it ...","content":"Header (Block)\n \nNotes:\n \n\nThe header block is loaded by default in the Franklin boilerplate into the <header> element.\nOut-of-the-box it provides code for a responsive navigation but it is like most blocks very likely to be extended or adjusted on the per project basis.\n\n \n\nThe header block is usually not referenced by authors but is loaded automatically on every page.\n\n \n\nThe content for the navigation is loaded as a fragment and is by default authored in a nav (or nav.docx) document, and structured primarily into three sections for branding, navigation sections (nested <ul>) and tools.\n\n \n\nThe nav document has its own lifecycle and when previewed or published applies to all pages that use a given navigation.\n\n \n\nIt is not uncommon to have multiple nav documents for a site eg. one per locale / language or section of a site.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nThis code is included in Franklin Boilerplate, there is no need to copy it.\n\n \n\nBoilerplate Block Code","lastModified":"1664842393"},{"path":"/developer/block-collection/headings","title":"Headings","image":"/developer/block-collection/media_1c3cf66f7779a629703d2ad36486f4b2e543eb0d2.png?width=1200&format=pjpg&optimize=medium","description":"Semantic headings are the backbone of any document structure. In Helix documents you should always follow the semantic hierarchy of your document, meaning that a ...","content":"Headings\n \nNotes:\n \n\nSemantic headings are the backbone of any document structure. In Helix documents you should always follow the semantic hierarchy of your document, meaning that a Heading 1 should contain a Heading 2 which in turn should contain a Heading 3 and so forth.\nIn cases where you find yourself using the headings out of sequence or leaving gaps in the heading hierarchy, that’s usually an indication that you are either trying to use headings to adjust to visual or design constraints or you are using headings for something that is semantically not a heading. Either of those can lead to bad results.\n\n \n\nAccording to Web best practices there should only be a single Heading 1 per page, which will also be used as the default title for the document.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\nThe Content Structure leverages the built-in Heading 1 - Heading 6 mapped to h1 through h6.\n\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nAs headings are default content they are styled in project or block CSS code. There is usually no JavaScript code used.\nThis code is included in Helix Boilerplate, there is no need to copy it.\n\n \n\nhttps://github.com/adobe/helix-project-boilerplate/blob/27e8571592220da8ded7c8a7e5064d982f7cfe76/styles/styles.css#L63-L78","lastModified":"1664375453"},{"path":"/developer/block-collection/hero","title":"Hero (Block)","image":"/developer/block-collection/media_150a4440cda1f0c42254469dba06c648a80c08625.png?width=1200&format=pjpg&optimize=medium","description":"The hero block can is a representation of what’s displayed above the fold. On most websites there is a special visual treatment for the block ...","content":"Hero (Block)\n \nNotes:\n \n\nThe hero block can is a representation of what’s displayed above the fold. On most websites there is a special visual treatment for the block that contains the title of the page and usually some decorative imagery.\n\n \n\nThe Boilerplate hero block simply consists of the Heading 1 of the page as well as a hero image. The default styling uses the Hero Image as the background and overlays the Heading 1.\n\n \n\nOut of the box the Hero block is created automatically through “Auto Blocking” if the first image appears before the Heading 1 in the document.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nThis code is included in Helix Boilerplate, there is no need to copy it.\n\n \n\nBoilerplate Block Code\n\n \n\nAuto Blocking Boilerplate Code","lastModified":"1664375453"},{"path":"/developer/block-collection/icons","title":"Icons","image":"/developer/block-collection/media_18f82b4036880dff06ccb2bcdac7540d876060566.png?width=1200&format=pjpg&optimize=medium","description":"Most if not all websites have icons, therefore Helix offers a simple way to reference icons for authors.","content":"Icons\n \nNotes:\n \n\nMost if not all websites have icons, therefore Helix offers a simple way to reference icons for authors.\n\n \n\nIn Helix icons are referenced as :<iconname>: notation. As there are different ways to implement icons in the browser either as plain css classes, icon fonts or SVG, we offer a non-intrusive way to support all of those.\n\n \n\nThe helix boilerplate includes an automatic insertion of SVGs from a /icons/ folder right into the DOM of the HTML document, which allows for styling of the icons with CSS including fill and stroke properties.\nIn many cases the collection of approved icons for a project are maintained by graphic designers and developers as part of the codebase in github, so it is good practice to keep the list of icons in a reference document that is available to authors and lets people browse all the icons.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\nThe :<iconname>: can be inserted as a part of all Default Content constructs.\n\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nIcons are Default Content and are styled in project specific CSS code. If there is any JavaScript that is required to load the SVGs it can be adapted as needed.\nThis code is included in Helix Boilerplate, there is no need to copy it.\n\n \n\nSee SVG loading Code","lastModified":"1664375453"},{"path":"/developer/block-collection/images","title":"Images","image":"/developer/block-collection/media_1cf49b3e93fae6364a0c1d0802576d967330da2a6.png?width=1200&format=pjpg&optimize=medium","description":"Pictures, Illustrations and Images are an integral part of making a web experience both more informative and also more engaging. Simply add images to your ...","content":"Images\n \nNotes:\n \n\nPictures, Illustrations and Images are an integral part of making a web experience both more informative and also more engaging. Simply add images to your documents either by inserting them or just copy/paste images from your source.\n\n \n\nAdd Alt-texts to your images to make your content more accessible. Both Word and Google Docs have great support for that.\n\n \n\nHelix automatically takes care of resizing the images to the appropriate size for the website and converting them into the formats that make sense for the consuming browser.\n\n \n\nWe recommend inserting your images with at least a width of 2000 pixels if available, so even at a large display resolution the images will still be crisp.\n\n \n\nThe first image on a page will automatically become the image that is used in metadata (for social media and messaging applications) unless defined otherwise in metadata.\n\n \n\nSpecial Mention for GDocs: Google downsizes the images to a maximum of 1600 pixels width or 1600 height. This is still sufficient for most use cases of photography images, but for some illustrations it can lead to visible artifacts.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nAs images are considered Default Content they are styled in project or block CSS code. There is usually no JavaScript code used.\nThis code is included in Helix Boilerplate, there is no need to copy it.\n\n \n\nView Code","lastModified":"1664375453"},{"path":"/developer/block-collection/links","title":"Links","image":"/developer/block-collection/media_157931971a19aa859a332e2d84c69c663e75d8d1f.png?width=1200&format=pjpg&optimize=medium","description":"Hyperlinks are essential to connect websites and your content. To create a link in Helix just use the insert link option in word or google ...","content":"Links\n \nNotes:\n \n\nHyperlinks are essential to connect websites and your content. To create a link in Helix just use the insert link option in word or google doc.\n\n \n\nLinks can be added across all the default content and the different formatting options.\n\n \n\nIn Word and Google Docs only absolute links are accepted, which is usually easier to copy paste from your browser. Helix automatically makes links within your own content relative to your site, while external links are kept absolute.\n\n \n\nLinks are often used beyond the expected text links in Helix projects and reference for example embedded media or referenced fragments that are inlined in the page.\n\n \n\nSpecial Mention: Microsoft Word Online does not allow links on images, which is why Helix also supports plain links (just the URL as a link) directly following an image. Of course it is much more intuitive and readable to have the link on the image, so we recommend that option, if you are not working in Word Online.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nAs Images are considered Default Content they are styled in project or block CSS code. There is usually no JavaScript code used.\nThere is no link related styling code in the Helix boilerplate project.","lastModified":"1664375453"},{"path":"/developer/block-collection/lists","title":"Lists","image":"/developer/block-collection/media_1c53bd9a50a39aaf10943ad3870eb2e3785089ac3.png?width=1200&format=pjpg&optimize=medium","description":"Lists serve many purposes in the Web in general, some uses or obvious lists inside default content, while others are used in navigations or other ...","content":"Lists\n \nNotes:\n \n\nLists serve many purposes in the Web in general, some uses or obvious lists inside default content, while others are used in navigations or other hierarchical constructs.\n\n \n\nHelix supports the extraction of nested numbered lists and bullet lists which are converted to the <ol> and <ul> HTML tags respectively.\n\n \n\nComplex list items seem to be hard to manage in word processing without accidentally being broken up so it is generally recommended to keep lists relatively simple when it comes to the complexity of the items in the list.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nAs lists are considered Default Content they are styled in project or block CSS code. There is usually no JavaScript code used.\nThis code is included in Helix Boilerplate, there is no need to copy it.\n\n \n\nView Code","lastModified":"1664375453"},{"path":"/developer/block-collection/metadata","title":"Metadata (Block)","image":"/developer/block-collection/media_1db131c6f67fec049e36a66a7ca6d8fd1a0674d14.png?width=1200&format=pjpg&optimize=medium","description":"The Metadata block is a special block that is handled by Franklin internally to add <meta> tags in the <head> of the HTML markup delivered ...","content":"Metadata (Block)\nNotes:\n\nThe Metadata block is a special block that is handled by Franklin internally to add <meta> tags in the <head> of the HTML markup delivered from the Franklin service. There should only be one Metadata block per page and while its placement doesn’t matter, by convention it is placed at the bottom of the document.\n\nThe metadata block is essentially following an intuitive name/value pair structure where the name is in the first column of the table and the value is in the second column.\n\nThere are a few well-known properties that behave according to the HTML specification and popular additional metadata schemes like og: and twitter: the well known metadata properties include Title, Description, Image, Tags and Feed.\n\nBeyond the well-known properties Franklin has some special semantics for Theme and Template that are added as classes to the <body> tag by the Franklin boilerplate code and are often used for styling and autoblocking.\n\nBeyond that a project can add an arbitrary number of name value pairs that get added as <meta> tags to the markup, and can be used with project specific semantics.\n\nExample:\n\nSee Live output\n\nContent Structure:\n\nSee Content in Document\n\nCode:\n\nThe metadata block is processed as part of the Franklin service. There is no project code related to the processing.","lastModified":"1678699346"},{"path":"/developer/block-collection/section-metadata","title":"Section Metadata (Block)","image":"/developer/block-collection/media_1d41f73912d02e91cdd3608e89a6d34765c2a9fa3.png?width=1200&format=pjpg&optimize=medium","description":"The Section Metadata block is a special block that is handled by Helix boilerplate code internally to add data-*s attributes to the containing section.","content":"Section Metadata (Block)\n \nNotes:\n \n\nThe Section Metadata block is a special block that is handled by Helix boilerplate code internally to add data-*s attributes to the containing section.\n\n \n\nSection Metadata block follows an intuitive name/value pair structure where the name is in the first column of the table and the value is in the second column.\n\n \n\nThe Style property is translated into a class while any other name will be transformed into a data-* attribute.\n\n \n\nAs Section Metadata generally adds complexity for authors, it is recommended to avoid it, until it is really necessary.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nThe section metadata block is processed as part of the helix boilerplate code. There is no project code related to the processing.","lastModified":"1664375453"},{"path":"/developer/block-collection/sections","title":"Sections","image":"/developer/block-collection/media_1a37bf21e07ae6d5f0f47518c42790b0fe324dc1f.png?width=1200&format=pjpg&optimize=medium","description":"Sections are the top level grouping mechanism on Helix pages, think of them as containers for a set of default content and blocks. Learn more ...","content":"Sections\n \nNotes:\n \n\nSections are the top level grouping mechanism on Helix pages, think of them as containers for a set of default content and blocks. Learn more about the Helix Document Structure here.\n\n \n\nSections are separated by “Horizontal Rules” or --- to group certain elements of a page together. There may be both semantic and design reasons to group content together, a simple case could be that a section of a page has a different background color.\n\n \n\nTechnically a section just introduces a <div> wrapper in the markup delivered around all the blocks and default content contained in the section.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nIn most cases generic sections don’t have much styling code beyond project specific box layout (eg. margins, padding, max-width) and are sometimes augmented with section metadata to control styling (often background colors or images).\n\n \n\nSee Section Styling Code","lastModified":"1664375453"},{"path":"/developer/block-collection/text","title":"Text","image":"/developer/block-collection/media_1abf8072988170297c25bdefb49865b9b0ba27e84.png?width=1200&format=pjpg&optimize=medium","description":"A Text Paragraph (or Copy) is the most common element on websites. Helix understands and translates a number of semantic formatting like bold, italic, underline, ...","content":"Text\n \nNotes:\n \n\nA Text Paragraph (or Copy) is the most common element on websites. Helix understands and translates a number of semantic formatting like bold, italic, underline, strike-through as well as subscript and superscript, which are translated to their respective semantic HTML tags of <strong>, <em>, <u>, <s>, <sup> and <sub>.\n\n \n\nCSS styling may take hints from these formatting options and use them to express visually very different styling. Both a paragraph and line-feed are supported.\n\n \n\nThe first portion of the first text paragraph serves as the default description for the a page if nothing else is specified in metadata.\n\n \nExample:\n \n\n     \n\n \n\nSee Live output\n\n \nContent Structure:\n \n\nThe content structure is based on the simple Normal Text paragraphs in word or google doc.\n\n \n\n     \n\n \n\nSee Content in Document\n\n \nCode:\n \n\nAs text is Default Content it is styled in project or block CSS code. There is usually no JavaScript code used.\nThis code is included in Helix Boilerplate, there is no need to copy it.\n\n \n\nhttps://github.com/adobe/helix-project-boilerplate/blob/27e8571592220da8ded7c8a7e5064d982f7cfe76/styles/styles.css#L45-L51","lastModified":"1664375453"},{"path":"/developer/example-form/thank-you","title":"Thank you for your submission.","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"We will not contact you of course, as this is just a demo form.","content":"Thank you for your submission.\n \n\nWe will not contact you of course, as this is just a demo form.","lastModified":"1664375453"},{"path":"/developer/favicon","title":"Favicon","image":"/developer/media_18612115e4e3f4c51ff58ca04efa6ce3a8d2dec8b.png?width=1200&format=pjpg&optimize=medium","description":"Learn how to add a favicon","content":"Favicon\n \n\nAdding a favicon to your site gives it a professional look in your visitor’s browsers:\n\n \n\n     \n\n \nAdding a favicon\n \nAdd an icon called favicon.svg to the styles folder in your GitHub repository. We recommend using the SVG format for best results. That’s all – your site now has a favicon! If you choose a different file name or folder for your favicon, you can adjust the path in scripts.js: look for the loadLazy function which passes the path to addFavIcon. Commit and push your change to see it on hlx.page and hlx.live.","lastModified":"1664375453"},{"path":"/developer/forms","title":"Forms","image":"/developer/media_19250d4a8c0989bb316600928c0aca2dbd0e384c1.png?width=1200&format=pjpg&optimize=medium","description":"Learn how to use the Franklin forms service","content":"Forms\n\nFranklin offers a forms service that ingests submitted data into a Microsoft Excel or Google Sheet document.\n\nHaving data submitted through forms on your website flow directly into spreadsheets makes it easily accessible to business users. Such data can also interact with more complex automated workflows as both Google Sheets as well as Microsoft Excel and Sharepoint offer access to a vibrant ecosystem and robust APIs.\n\nPreparing a Sheet for Data Ingestion\nCreate an Excel workbook or Google sheet anywhere under your Franklin project directory. This document uses a sheet in OneDrive called email-form.xlsx in the root of a Franklin project. Share the sheet or a parent directory containing the sheet with helixfrm@adobe.com for OneDrive or helix@adobe.com for Google Drive. Open the workbook created and rename the default sheet to incoming.\n \n\nNote: Franklin will not send any data to this workbook if the incoming sheet does not exist. Preview the sheet in the sidekick. \nNote: Even if a sheet has been previewed previously it must be previewed again after creating the incoming sheet for the first time. Set up the sheet with the headers that match the data being ingested. You can either do this manually or by sending a POST request to the form route in Franklin Admin. The admin service will look at the data in the POST body and create the necessary headers/tables and sheets required to ingest data and get the most from the Franklin forms service.\nFor details on the format of the POST request to set up your sheet, see the Franklin Admin documentation as well as the following example:\nRequest:\nPOST /form/hlxsites/some-customer/main/en/email-form.json HTTP/1.1\n{\"data\":{\"firstName\":\"test\"}}\n\n\nResponse\nHTTP/1.1 200 OK\n{\"rowCount\":2,\"columns\":[\"firstName\"]}\n\n\nThe Franklin Admin service is recommended to set up your sheet, but if you would like to create the headers manually, please see the document Manual Forms Sheet Setup. After sending the POST request to the admin service you will see the following changes to your workbook.\nA sheet named helix-default is created. The data in this sheet is what will be returned when a GET request is made to the sheet. This is a great place to use spreadsheet formulas to summarize the data from the incoming sheet for consumption elsewhere.\n\nNote: The helix-default sheet should never contain any personally identifiable information or other data you are not ok with being publicly accessible. A sheet named slack was created. Here you can set up automatic notifications to a Slack channel anytime data is ingested to your spreadsheet. Currently Franklin only supports notifications to the AEM Engineering slack org as well as the Adobe Enterprise Support org.\nTo setup Slack notifications enter the teamId of the Slack workspace and the channel name or ID. You can also ask the Franklin slack-bot (with the debug command) for the teamId and the channel ID. Using the channel ID instead of the name is preferable, as it survives channel renames.\n\nNote: Older forms didn’t have the teamId column. The teamId was included in the channel column, separated by a # or /. Enter any title you want and under fields enter the names of the fields you want to see in the Slack notification. Each heading should be separated by a comma (eg. name, email).\n\n\n\n\nSending Data to Your Sheet\n\nThe sheet is now ready for data ingestion and you can send POST requests directly to the sheet on hlx.page, hlx.live or your production domain.\n\nPOST https://ref–repo–owner.hlx.(page|live)/email-form\nPOST https://my-domain.com/email-form\n\n\nNote: The URL should not include the .json extension. The sheet must be published for POST operations to work on .live or on the production domain.\n\nThere are a few different ways you can format the form data in the POST body.\n\nAs an array of name/value pairs\nhttps://gist.github.com/dylandepass/9ba6b83700dfce1fa90a47bde62c2e9 As an object with key/value pairs\nhttps://gist.github.com/dylandepass/2b5f694723dfdb3d304fcafc613d6595 As x-www-form-urlencoded body (content-type header must be set to application/x-www-form-urlencoded)\nhttps://gist.github.com/dylandepass/b72b2e30313bc80beb02e12b1d7201ff\n\nThat’s it! The forms service runs every minute so you will quickly see your data ingested into the sheet.\n\nAuthor-Created Forms\n\nIn many cases it is desirable to have authors create forms and decide what form fields should be presented to the visitor of your website. It is common to use the helix-default sheet of the same spreadsheet that is used for the submission of the form as the place to let the author define their forms.\n\nUsually, there is a forms block that takes a reference to the spreadsheet and renders the form and handles the user flow through submission.\n\n\nA simple example of such a form block can be found here.\n\nSee the following example of what the spreadsheet for the form definition could look like.\n\nThe supported form fields are extensible and the form should be viewed as an example that gives you a starting point.\n\nAs an example a fully-functional form was added to this page, using the previously-listed code base by simply adding the following block in the Google Doc:\n\nhttps://main--helix-website--adobe.hlx.page/developer/example-form/example-form.json\n\nFeel free to try it out and see the form data flow into the incoming sheet. It may take a minute to get from the form service to the spreadsheet.","lastModified":"1675416312"},{"path":"/developer/indexing","title":"Indexing","image":"/developer/media_1b22b976a6dc9408f6ed3fd4e8b247698f3c8ba92.png?width=1200&format=pjpg&optimize=medium","description":"Franklin offers a way to keep an index of all the published pages in a particular section of your website. This is commonly used to ...","content":"Indexing\n\nFranklin offers a way to keep an index of all the published pages in a particular section of your website. This is commonly used to build lists, feeds, and enable search and filtering use cases for your pages or content fragments.\n\nFranklin keeps this index in a spreadsheet and offers access to it using JSON. Please see the document Spreadsheets and JSON for more information.\n\nSetting Up an Initial Query Index\n\nIn this section we’ll create a query index in the root folder that will index all documents in your backend.\n\nAfter setting up your fstab.yaml with a mountpoint that points into your SharePoint site or Google Drive, go to the root folder. Depending on your backend, create either a workbook named query-index.xlsx for SharePoint or a spreadsheet named query-index for Google Drive. In that spreadsheet or workbook, create a sheet named raw_index.\nSetting Up Properties to be Added to the Index\nIn your query-index document, add a header line and in the first column add path as the header name. In the following columns of the header line, add all other properties you need extracted from the rendered HTML page.\n\nPages are indexed when they are published, to remove pages they have to be unpublished. By default pages that have robots set to noindex will automatically be omitted from indexing. (see robots below).\n\nIn the following example in Google Drive, the extracted fields are title, image, description, and lastModified.\n\nThe following table summarizes the properties that are available and from where in the HTML page they’re extracted.\n\nName\t Description author\t Returns the content of the meta tag named author in the head element. \n title\t Returns the content of the og:title meta property in the head element. \n date\t Returns the content of the meta tag named publication-date in the head element. \n image\t Returns the content of the og:image meta property in the head element. \n category\t Returns the content of the meta tag named category in the head element. \n tags\t\n\nReturns the content of the meta tag named article:tag in the head element as an array.\n\nSee the document Spreadsheets and JSON for more information on array-handling.\n\n\n description\t Returns the content of the meta tag named description in the head element. \n robots\t Returns the content of the meta tag named robots in the head element. Adding a robots column will allow pages that have robots set to noindex to be added to an index. \n lastModified\t Returns the value of the Last-Modified response header for the document.\n\nFor every other header added, the indexer will try to find a meta tag with a corresponding name.\n\nActivate Your Index\n\nTo activate your index, preview the spreadsheet using the sidekick. This will create an index configuration from the spreadsheet that can be viewed at the following location:\n\nhttps://<branch>--<repo>--<owner>.hlx.page/helix-query.yaml\n\nChecking Your Index\n\nThe Franklin Admin Service has an API endpoint where you can check the index representation of your page. Given your GitHub owner, repository, branch and owner, and a resource path to a page, its endpoint is:\n\nhttps://admin.hlx.page/index/<owner>/<repo>/<branch>/<path>\n\nYou should get a JSON response where the data node contains the index representation of the page.\n\nDebugging Your Index Configuration\n\nThe Franklin CLI has a feature where it will print the index record whenever you change your query configuration, which assists in finding the correct CSS selectors:\n\n$ hlx up --print-index\n\nPlease see the Franklin CLI GitHub documentation for more information and watch this video to learn more about this feature.\n\nSetting Up More Index Configurations\n\nYou can have more than one index configuration in the same helix-query.yaml, where parts of your sites are indexed into different Excel workbooks or Google spreadsheets. See the document Indexing reference for more information.","lastModified":"1681221400"},{"path":"/developer/keeping-it-100","title":"Keeping It 100, Web Performance with Franklin","image":"/developer/media_1c0a833642edcfbc157cedaea970bc574bff0f4bb.png?width=1200&format=pjpg&optimize=medium","description":"The quality of the experience of consumers of Franklin websites is crucial to achieving the business goals of your website and the satisfaction of your ...","content":"Keeping It 100, Web Performance with Franklin\n\nThe quality of the experience of consumers of Franklin websites is crucial to achieving the business goals of your website and the satisfaction of your visitors.\n\nFranklin is optimized to deliver excellent experiences and optimal web performance. With the Franklin real-user monitoring (RUM) data collection, Franklin collects information about your website and offers a way to iterate on real user performance measurements without having to wait for the CRuX data to show effects of code and deployment changes.\n\nThe Google PageSpeed Insight Service is proven to be a good lab measurement tool. It can be used to avoid the slow deterioration of the performance and experience score of your website.\n\nIf you start your project with the Franklin boilerplate as in the Franklin Developer Tutorial, you will get a very stable Lighthouse score that is 100. On every component of the lighthouse score there is some buffer for the project code to use and still be within the boundaries of a perfect 100 score.\n\nTesting Your Pull Requests\n\nIt turns out that it is very hard to improve your Lighthouse score once it is low, but it is not hard to keep it at 100 if you continuously test.\n\nWhen you open a pull request (PR) on a Franklin project, the test URLs in the description of your project are used to run the PageSpeed Insights Service against. The Franklin GitHub bot will automatically fail your PR if the score is below 100 with a little bit of buffer to account for some volatility of the results.\n\nThe results are for the mobile lighthouse score, as they tend to be harder to achieve than desktop.\n\nWhy Google PageSpeed Insights?\n\nMany teams and individuals use their own configurations for measuring Lighthouse scores. Different teams have developed their own test harnesses and use their own test tools with configurations that have been set up as part of their continuous monitoring and performance reporting practices.\n\nThe performance of a website impacts its rankings in search results, which is reflected by the Core Web Vitals in the crUX report. Google has a great handle on the relevant average combinations of device information (e.g. screen size) as well as network performance of those devices. But in the end, SEO is the ultimate arbiter of what good vs. bad web performance is. As the specific configuration is a moving target, performance practices should be aligned with the current average devices and network characteristics globally.\n\n\nSo instead of using a Franklin-specific configuration for Lighthouse testing, Franklin uses the continuously-updated configurations seen as part of the mobile and desktop strategies referenced in the latest versions of the Google PageSpeed Insights API.\n\nWhile there may be additional insight that some users feel they can collect from other ways of measuring Lighthouse scores, to be able to have a meaningful and comparable performance conversation across projects, there needs to be a way to measure performance universally. The default PageSpeed Insight Service is the most authoritative, most widely accepted lab test when it comes to measuring your performance.\n\nHowever it is important to remember that the recommendations that you get from PageSpeed Insights do not necessarily lead to better results, especially the closer you get to a lighthouse score of 100.\n\nCore Web Vitals (CWV) collected by Franklin’s built-in RUM data collection play an important role in validating results. For minor changes, however, the variance of the results and the lack of sufficient data points (traffic) over a short period of time makes it impractical to get statistically relevant results in most cases.\n\nThree-Phase Loading (E-L-D)\n\nDissecting the payload that's on a web page into three phases makes it relatively straight-forward to achieve a clean lighthouse score and therefore set a baseline for a great customer experience.\n\nThe three phase loading approach divides the payload and execution of the page into three phases\n\nPhase E (Eager): This contains everything that's needed to get to the largest contentful paint (LCP). Phase L (Lazy): This contains everything that is controlled by the project and largely served from the same origin. Phase D (Delayed): This contains everything else such as third-party tags or assets that are not material to experience.\nPhase E: Eager\n\nIn the eager phase, everything that's needed to be loaded for the true LCP to be displayed is loaded. In a Franklin project, this usually consists of the markup, the styles required above the fold, and a JavaScript file.\n\nIn many cases the LCP element is contained in a block (often created by auto blocking), where the block .js and and .css also have to be loaded.\n\nFranklin’s block loader unhides sections progressively, which means that all the blocks of the first section have to be loaded for the LCP to become visible. For this reason, it might make sense to have a smaller section containing as little as needed at the top of a page.\n\nPhase L: Lazy\n\nIn the lazy phase, the portion of the payload is loaded that doesn't affect total blocking time (TBT) and time to interactive (TTI) and ultimately first input delay (FID).\n\nThis includes things like loading blocks (JavaScript and CSS) as well as loading all the remaining images according to their loading=\"lazy\" attribute and other JavaScript libraries that are not blocking. The lazy phase is generally everything that happens in the various blocks you are going to create to cover the project needs.\n\nIn this phase it would still be advisable that the bulk of the payload come from the same origin and is controlled by the first party, so that changes can be made if needed to avoid negative impact on TBT, TTI and FID.\n\nPhase D: Delayed\n\nIn the delayed phase, the parts of the payload are loaded that don't have an immediate impact to the experience and/or are not controlled by the project and come from third parties. Think of marketing tooling, consent management, extended analytics, chat/interaction modules etc. which are often deployed through tag management solutions.\n\nIt is important to understand that for the impact on the overall customer experience to be minimized, the start of this phase needs to be significantly delayed. The delayed phase should be at least three seconds after the LCP event to leave enough time for the rest of the experience to get settled.\n\nThe delayed phase is usually handled in delayed.js which serves as an initial catch-all for scripts that cause TBT. Ideally, the TBT problems are removed from the scripts in question either by loading them outside of the main thread (in a web worker) or by just removing the actual blocking time from the code. Once the problems are fixed, those libraries can easily be added to the lazy phase and be loaded earlier.\n\nHeader and Footer\n\nThe header and specifically the footer of the page are not in the critical path to the LCP,which is why they are loaded asynchronously in their respective blocks. Generally, resources that do not share the same life cycle (meaning that they are updated with authoring changes at different times) should be kept in separate documents to make the caching chain between the origins and the browser simpler and more effective. Keeping those resources separate increases cache hit ratios and reduces cache invalidation and cache management complexity.\n\nFonts\n\nSince web fonts are often a strain on bandwidth and loaded from a different origin via a font service like https://fonts.adobe.com or https://fonts.google.com, it is largely impossible to load fonts before the LCP, which is why they are usually added to the lazy-styles.css and are loaded after the LCP is displayed.\n\nBonus: Speed is Green\n\nBuilding websites that are fast, small, and quick to render is not just a good idea to deliver exceptional experiences that convert better, it is also a good way to reduce carbon emissions.","lastModified":"1675420288"},{"path":"/developer/markup-reference","title":"Helix HTML Markup reference","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"While for most development tasks the Helix DOM is the relevant interface for a developer, there are certain situations (eg. Auto Blocking) where a developer ...","content":"Helix HTML Markup reference\n \n\nWhile for most development tasks the Helix DOM is the relevant interface for a developer, there are certain situations (eg. Auto Blocking) where a developer interacts with the raw HTML markup that is rendered by the helix pipeline on the server.\n\n \nGeneral HTML Markup Document structure\n \n<!DOCTYPE html>\n<html>\n  <head>\n    <title>...</title>\n    {metadata}\n    {head.html}\n  </head>\n  <body>\n    <header></header>\n    <main>\n\t{main-content}\n    </main>\n    <footer></footer>\n  </body>\n</html>\n\n \nMetadata\n \n\nThe metadata portion of the document consists of a list of <meta> tags, some of them correspond to well known HTML metadata or metadata data without defined semantics. See more in the metadata block specification.\n\n \n\nIn the simplest case there is a eg.\n\n \n\n<meta name=\"template\" content=\"docs\">\n\n \n\nwhich maps a metadata property named template to a value of docs.\n\n \nhead.html\n \n\nThe head.html portion of the document contains verbatim of what’s found in the head.html of the corresponding github branch.\n\n \nMain Content\n \n\nAll the content that semantically maps to document semantics of an individual page or fragment is found in the main-content content section of the markup. It consists of default content, sections and blocks.\n\n \n\nIt is important that both default content and any cell of a block can contain the following HTML tags and attributes.\n\n \n<a>\n<br>\n<code>\n<del>\n<em>\n<h1> to <h6>\n<img>\n<li>\n<ol>\n<p>\n<picture>\n<pre>\n<source>\n<span>\n<strong>\n<sub>\n<sup>\n<table>\n<tbody>\n<td>\n<th>\n<thead>\n<tr>\n<u>\n<ul>\n\n \n\nWhile most of those are self explanatory and align very much with their respective semantic definitions there are a couple that are worth calling out.\n\n \n<h1> to <h6>\n \n\nHeadings 1 through 6 have an id= attribute containing a sanitized version of the .innerText to allow for direct addressing of a heading in a URL fragment\n\n \n<picture>, <source> and <img>\n \n\nImages are rendered as a <picture>, <source> and <img> combination, with a mobile and desktop breakpoint, as well as a fallback for browsers that don’t support webp.\n\n \n\nThe <img> element features a height= and width= attribute containing the intrinsic dimensions of the image as well as an alt= attribute with the alt text as provided.\n\n \n<span>\n \n\nThe use of <span> is limited to icons, and indicates the icon as part of the class=\"icon icon-<iconname>\" attribute","lastModified":"1664375453"},{"path":"/developer/markup-sections-blocks","title":"Markup, Sections, Blocks, and Auto Blocking","image":"/developer/media_125ee1e7dbebdfdac6eb972fdbeff2a361d4e85cf.png?width=1200&format=pjpg&optimize=medium","description":"To design websites and create functionality, developers use the markup and DOM that Franklin renders dynamically from the content. The markup and DOM are constructed ...","content":"Markup, Sections, Blocks, and Auto Blocking\n\nTo design websites and create functionality, developers use the markup and DOM that Franklin renders dynamically from the content. The markup and DOM are constructed in a way that allows flexible manipulation and styling. At the same time it provides out-of-the-box functionality so the developer does not have to worry about some of the aspects of modern websites.\n\nStructure of a Franklin Document\n\nThe single most important aspect when structuring a document for the use in Franklin is to make it simple and intuitive for authors who will contribute the content.\n\nThis means that it is strongly recommended to involve authors very early in the process. In many cases it is good practice to just let authors put the content that needs to go on to a page into a Google Doc or Word document without having any notion of Franklin, and then try to make small structural changes and introduce sections and blocks only where necessary.\n\nA Franklin document follows the following structure in the abstract.\n\nA Franklin page as authored in Word or a Google Doc document uses the well-understood semantic model like headings, body text, lists, images, links, etc. that is shared between HTML, markdown, and Google Doc / Word. Franklin calls this default content. In an ideal situation one would leave as much of the content authored as default content as possible, since this is the natural way for authors to treat documents.\n\nIn addition to default content, Franklin has the concept of page sections, separated by horizontal rules or --- to group certain elements of a page together. There may be both semantic and design reasons to group content together. A simple case could be that a section of a page has a different background color.\n\nFranklin also introduces a concept of blocks which are authored as a table with a heading as the first row that identifies the type of block. This concept is the easiest approach to componentize your code.\n\nSections can be comprised of multiple blocks. Blocks should never be nested as it makes things very hard to use for authors.\n\nDOM vs. Markup\n\nFranklin produces a clean and easily readable semantic markup from the content that’s provided to it. You can easily access it using the view source feature and have a look at the markup of the page you are currently reading.\n\nThe Franklin JavaScript library used in scripts.js takes the markup and enhances it into the Franklin DOM that is then used for most development tasks, specifically to build blocks. To create a DOM that’s easy to work with for custom project code, it is best to view it as a two-step process.\n\n\nIn the first step, Franklin creates the markup with sections, blocks, and default content that will look similar to this.\n\n\n\nIn the second step, Franklin augments the above mark-up into the following example DOM, which then can be used for styling and adding functionality. The differences between the markup that’s delivered from the server and the augmented DOM that is used for most of the Franklin development is highlighted below.\n\nIt primarily consists of introducing a wrapper <div> for blocks and default content and dynamically adding additional helpful CSS classes and data attributes that are used by the Franklin block loader.\n\nSections\n\nSections are a way to group default content and blocks by the author. Most of the time section breaks are introduced based on visual differences between sections such as a different background color for a part of a page.\n\nFrom a development perspective, there is usually not much interaction with sections beyond CSS styling.\nSections can contain a special block called Section Metadata, which instructs Franklin to add data attributes to a section. The names of the data attributes can be chosen by the authors, and the only well-known section metadata property is Style which will be turned into additional CSS classes added to the containing section element.\n\nBlocks and default content are always wrapped in a section, even if the author doesn’t specifically introduce section breaks.\n\nDefault Content\n\nThere is a broad range of semantics that are shared between Word documents, Google Docs, markdown, and HTML. For example there are headings of different levels (eg. <h1> - <h6>), images, links, lists (<ul>, <ol>), emphasis (<em>, <strong>) etc.\n\n\nFranklin takes advantage of the intuitive understanding that authors have of how to use these semantics in the tools that they are familiar with (eg. Word/Google docs) and maps those to markdown and then renders them in the HTML markup.\n\nAll mappings should be relatively straightforward and intuitive for the developer. One area where Franklin goes a little bit further than the simplest possible translation is in handling images. Instead of a simple <img> tag, Franklin renders a full <picture> tag with a number of different resolutions needed for display on desktop and mobile devices as well as different formats for modern browsers that support webp and older browsers which do not.\n\nBlocks\n\nMost of the project-specific CSS and JavaScript lives in blocks. Authors create blocks in their documents and developers write the corresponding code that styles the blocks with CSS and/or decorates the DOM to take the Franklin markup of a block and transform it to the structure that’s needed or convenient for desired styling and functionality.\n\n\nThe block name is used as both the folder name of a block as well as the filename for the CSS and JavaScript files that are loaded by the Franklin block loader when a block is used on a page. The block name is also used as the CSS class name on the block to allow for intuitive styling. The javascript is loaded as a Module (ESM) and exports a default function that is executed as part of the block loading.\n\nOne of the most important tenets of a Franklin project is to keep things simple and intuitive for authors. Complicated blocks make it hard to author content, so it is important that developers absorb the complexity of translating an intuitive authoring experience into the DOM that is needed for layout or application logic. It is often tempting to delegate complexity to the author. Instead, developers should make sure that blocks do not become unwieldy to create for authors. An author should always be able to simply copy/paste a block and intuitively understand what it is about.\n\nA simple example is the Columns Block. It adds additional classes in JavaScript based on how many columns are in the respective instance created by the author. This allows it to be able to use flexible styling of content that is in two columns vs. three columns.\n\nBlocks can be very simple or contain full application components or widgets and provide a way for the developer to componentize their codebase into small chunks of code that can be managed easily and can be loaded on to the web pages as needed.\n\nA block’s content is rendered into the markup as nested <div> tags for the rows and columns that the author entered. In the simplest case, a block has only a single cell.\n\n<div class=”blockname”>\n  <div>\n     <div>\n      <p>Hello, World.</p>\n     </div>\n  </div>\n</div>\n\n\nAuthors can add blocks to their pages in an ad-hoc manner by simply adding a table with the block name in the first row or table heading. Some blocks are also loaded automatically. header and footer blocks that need to be present on every page of a site are a good example of that.\n\nBlock Options\n\nIf you need a block to look or behave slightly differently based on certain circumstances, but not different enough to become a new block in itself, you can let authors add block options to blocks in brackets. These options add modified classes to the block. For example Columns (wide) in a table header will generate the following markup.\n\n<div class=”columns wide”>\n\n\nBlock options can also contain multiple words. For example Columns (super wide) will be concatenated using hyphens.\n\n<div class=”columns super-wide”>\n\nIf block options are comma-separated, such as Columns (dark, wide), they will be added as separate classes.\n\n<div class=”columns dark wide”>\n\nAuto Blocking\n\nIn an ideal scenario the majority of content in Franklin is authored outside of blocks, as introducing tables into a document makes it harder to read and edit. Conversely blocks provide a great mechanism for developers to keep their code organized.\n\nA frequently-used mechanism to get the best of both worlds is called auto blocking. Auto blocking turns default content and metadata into blocks without the author having to physically create them. Auto blocking happens very early in the page decoration process before blocks are loaded and is a practice that programmatically creates the DOM structure of a block as it would come as markup from the server.\n\nAuto blocking is often used in combination with metadata, particularly the template property. If pages have a common template, meaning that they share a certain page design or functionality, that’s usually a good opportunity for auto blocking.\n\nA good example is an article header of a blog post. It might contain information about the author, the title of the blog post, a hero image, as well as the publication date. Instead of having the author put together a block that contains all that information, an auto block (e.g. article-header block) would be programmatically added to the page based on the <h1>, the first image, the blog author, and publication date metadata.\n\nThis allows the content author to keep the information in its natural place, the document structure outside of a block. At the same time, the developer can keep all the layout and styling information in a block.\n\nAnother very common use case is to wrap blocks around links in a document. A good example is an author linking to a YouTube video by simply including a link, while the developer would like to keep all the code for the video inline embed in an embed block.\n\nThis mechanism can also be used as a flexible way to include both external applications and internal references to video, content fragments, modals, forms, and other application elements.\n\nThe code for your projects auto blocking lives in buildAutoBlocks() in your scripts.js.\n\nPlease see the following examples of auto blocking.\n\nAdobe Blog Franklin Boilerplate","lastModified":"1675331953"},{"path":"/developer/sitemap","title":"Sitemaps","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"Franklin can automatically generate sitemap files to be referenced from your robots.txt. This helps with SEO and the discovery of new content.","content":"Sitemaps\n\nFranklin can automatically generate sitemap files to be referenced from your robots.txt. This helps with SEO and the discovery of new content.\n\nSitemaps are based on indexes. Please see the document Indexing to learn more about indexing in Franklin.\n\nInitial Sitemap Configuration\n\nIf you follow the steps for setting up an initial query index in the document Indexing, the system will generate a sitemap configuration at the following location:\n\nhttps://<branch>--<repo>--<owner>.hlx.page/helix-sitemap.yaml\n\nThe next time you publish a page, the query index is updated and the sitemap is generated at the destination specified in the sitemap configuration.\n\nIt is recommended that you create a sitemap-index.xml file that references all your sitemaps and keep that as part of your project code in your github repo. This way it is easy to add new sitemaps as the project expands.\n\nManual Setup of Your Sitemap\n\nIf you need more customization than your generated sitemap configuration file provides, you can copy its contents and paste it into a file named helix-sitemap.yaml in the root folder of your Franklin project.\n\nThe following sections contain the types of sitemaps supported by Franklin.\n\nSimple Sitemap\n\nThe following is a simple helix-sitemap.yaml. It assumes a single index containing all the pages that need to appear in the sitemap.\n\n sitemaps:\n   example:\n     origin: https://www.example.com\n     source: /query-index.json\n     destination: /sitemap-en.xml\n\n\nIf you want last modification dates to be included in the URLs of your sitemap, add a lastmod property including a format to your configuration.\n\n sitemaps:\n   example:\n     origin: https://www.example.com\n     source: /query-index.json\n     destination: /sitemap-en.xml\n     Lastmod: YYYY-MM-DD\n\nMultiple Sitemaps\n\nIt is common to have sitemaps per section of the sites and/or per country or language. Franklin supports sitemaps including the corresponding hreflang references. In the following example we assume that there is a one to one mapping between the indexes and the sitemaps XML files.\n\n sitemaps:\n   example:\n     origin: https://www.example.com\n     languages:\n       en:\n         source: /en/query-index.json\n         destination: /sitemap-en.xml\n         hreflang: en\n       fr:\n         source: /fr/query-index.json\n         destination: /sitemap-fr.xml\n         hreflang: fr\n         alternate: /fr/{path}\n\nMultiple Indexes Aggregated Into One Sitemap\n\nThere are cases where it is easier to have a single larger sitemap than fragmented small sitemaps, especially as there is a limit of sitemaps that can be submitted to search engines per site.\n\nThe following example shows how to aggregate a number of separate indexes into a single sitemap.\n\n sitemaps:\n   example:\n     origin: https://www.example.com\n     languages:\n       dk:\n         source: /dk/query-index.json\n         destination: /sitemap.xml\n         hreflang: dk\n         alternate: /dk/{path}\n       no:\n         source: /no/query-index.json\n         destination: /sitemap.xml\n         hreflang: no\n         alternate: /no/{path}\n\n\nUsing the same destination it is possible to combine multiple small sitemaps into one larger sitemap.","lastModified":"1675414581"},{"path":"/developer/spreadsheets","title":"Spreadsheets and JSON","image":"/developer/media_1279ecd32099e4ef91e3fb0e080c921ff4b261db1.png?width=1200&format=pjpg&optimize=medium","description":"In addition to translating Google Docs and Word documents into markdown and HTML markup, Franklin also translates spreadsheets (Microsoft Excel workbooks and Google Sheets) into ...","content":"Spreadsheets and JSON\n\nIn addition to translating Google Docs and Word documents into markdown and HTML markup, Franklin also translates spreadsheets (Microsoft Excel workbooks and Google Sheets) into JSON files that can easily be consumed by your website or web application.\n\nThis enables many uses for content that is table-oriented or structured.\n\nSheets and Sheet structure\n\nThe simplest example of a sheet consists of a table that uses the first row as column names and the subsequent rows as data. An example might look something like this.\n\nAfter a preview and publish via the sidekick, Franklin translates this table to a JSON representation which is served to requests to the corresponding .json resource. The above example gets translated to:\n\n{\n  \"total\": 4,\n  \"offset\": 0,\n  \"limit\": 4,\n  \"data\": [\n    {\n      \"Source\": \"/sidekick-extension\",\n      \"Destination\": \"https://chrome.google.com/webstore/detail/helix-sidekick-beta/ccfggkjabjahcjoljmgmklhpaccedipo\"\n    },\n    {\n      \"Source\": \"/github-bot\",\n      \"Destination\": \"https://github.com/apps/helix-bot\"\n    },\n    {\n      \"Source\": \"/install-github-bot\",\n      \"Destination\": \"https://github.com/apps/helix-bot/installations/new\"\n    },\n    {\n      \"Source\": \"/tutorial\",\n      \"Destination\": \"/developer/tutorial\"\n    }\n  ],\n  \":type\": \"sheet\"\n}\n\n\nFranklin allows you to manage workbooks with multiple sheets.\n\nIf there is only one sheet, Franklin will by default use that sheet as the source of the information. If there are multiple sheets, Franklin will only deliver sheets that are prefixed with helix- which lets you keep additional information and possibly formulas in the same spreadsheet that are not delivered to the web. If there is a sheet named helix-default, it is delivered if there are no additional query parameters supplied.\n\nSee the following section for details on how to query a specific sheet.\n\nQuery Parameters\nOffset and Limit\n\nSpreadsheets and JSON files can get very large. In such cases, Franklin supports the use of limit and offset query parameters to indicate which rows of the spreadsheet are delivered.\n\nAs Franklin always compresses the JSON, payloads are generally relatively small. Therefore by default Franklin limits the number of rows it returns to 1000 if the limit query parameter is not specified. This is sufficient for many simple cases.\n\nSheet\n\nThe sheet query parameter allows an application to specify one or multiple specific sheets in the spreadsheet or workbook. As an example ?sheet=jobs will return the sheet named helix-jobs and ?sheet=jobs&sheet=articles will return the data for the sheets named helix-jobs and helix-articles.\n\nSpecial Sheet Names\n\nIn certain use cases, Franklin also writes to spreadsheets, where it expects specific sheet names.\n\nThe Franklin forms service only writes to a sheet named incoming, which is never delivered as a JSON. The Franklin index service only writes to a sheet named raw_index, which may be delivered to JSON in a simple single sheet setup.\n\nSee the links above for more information on those services.\n\nArrays\n\nNative arrays are not supported as cell values, so they are delivered as strings.\n\n\"tags\": \"[\\\"Adobe Life\\\",\\\"Responsibility\\\",\\\"Diversity & Inclusion\\\"]\"\n\nYou can turn them back into arrays in JavaScript using JSON.parse().","lastModified":"1678697686"},{"path":"/docs/setup-customer-sharepoint","title":"How to use Sharepoint with Franklin","image":"/docs/media_11979f0441c284255ce5699ed160ecf5310ef7cb8.png?width=1200&format=pjpg&optimize=medium","description":"Navigate to your desired location in sharepoint and create a root folder that will be your website root. It is best to not use a ...","content":"How to use Sharepoint with Franklin\n\nSetting up sharepoint with Franklin involves the following steps:\n\nCreate a folder within sharepoint that will be the website root. Create or define the (technical) user that will access the sharepoint content Share the website root folder with that user. Register the user with the Franklin service Configure the fstab.yaml with the respective folder\n1. Create the website root folder\n\nNavigate to your desired location in sharepoint and create a root folder that will be your website root. It is best to not use a sharepoint list root directly, so that you have a shared space for your authors to put collateral documents, for example a drafts folder, or how-to-author documentations.\n\nAn example file structure might look like this, using the website folder as the root:\n\n2. Create or define the user\n\nNote: if your project is using Adobe’s sharepoint, then the helix@adobe.com user is already created and you can skip to Step 3.\n\nIt is best practice to use a generic (or technical) user to access the content on behalf of the Franklin service. This is better than using an employee user account because the exact scope of the files the user can access can be defined. Furthermore, there is no risk losing access to the files, should that employee leave the company.\n\nEvery company has different procedures to create technical users, so ask your IT department on how to do this. Alternatively, you can also add Adobe’s dedicated user helix@adobe.com as an external user to your active directory. But usually external users have limited access and/or short login expiration times and are therefore not practical.\n\n3. Share the website root folder\n\nEnsure that the service user has edit rights on the website root folder. This can be achieved easily by clicking on the … ellipsis menu and selecting “Manage Access”.\n\nAnd then add the user via the “Direct access” option.\n\n4. Register the user\n\nNote: if your project is using Adobe’s sharepoint, then the helix@adobe.com user is already registered and you can skip to Step 5.\n\nOverview\n\nIn order for the Franklin service to access the authored content it needs a couple of information and setup. The Franklin service (a cloud function) accesses the MS Graph API on behalf of a configured user. In order to do so, it needs to authenticate first in the context of an Application. This is important because the scopes given to the application define what permission the service has on the MS Graph API. For example, it should be allowed to read and write documents, but not to alter access control.\n\nAn application is represented as “Enterprise Application” in the respective Active Directory of a tenant. The permissions given to that enterprise application ultimately define what the service can access in that tenant’s resources. Certain permissions need to be approved by an Active Directory administrator before a user can use the application. This so called “admin consent” is a mechanism to verify and control which permissions apps can have. This is to prevent dubious apps to trick users into trusting an app that is not official. Having the extra admin consent step allows IT security to control which apps the employees can use.\n\nAccess the Franklin Service Setup UI\n\nTo get started, open the Franklin Service Setup UI and enter the github url of your project:\n\nThen you need to “Sign In” with your personal user that has access to the website root. This is to verify that only people with sufficient credentials can manage the user registration.\n\nThe first time you login, you probably see the “Permission Requested” screen. This is to inform you about which permissions the “Franklin Service” application will have:\n\nGrant Admin Consent to the Franklin Service\n\nIf you are not an AD admin, you probably don’t have the “Consent on behalf of your organization” checkbox. And the login will fail. At this point an AD admin needs to consent the application.\n\nThe application will show up in your Azure Console / Enterprise Applications Blade:\n\nOpening the application details, and selecting the “Permission” Blade will show that there are not admin consented permissions.\n\nOnce an AD admin opens the “Grant admin consent …” link, it will be presented with the “Permissions Requested” screen:\n\nAfter that, the permissions blade will show the consented permissions:\n\nConnect the technical User\n\nWith the permission properly granted, you should be able to login properly to the Franklin Service Setup UI:\n\nYou can select which user type you want to connect first:\n\nThe “content” user will be used to read all the document and sheets. This is also the default, in case the “forms” or “index” users are not defined. The “forms” user will be used to update Franklin forms sheets. It therefore needs write (edit) permissions on those sheets. The “index” user is used to update the query-index sheets.It therefore needs write (edit) permissions on those sheets.\n\nWith the respective user type selected, click on “Add onedrive user” and you should see a new login window, where you want to login with your technical user. After the login process, the UI should show the connected user information:\n\nImportant\n\nChanging the user's password will invalidate the grant that is established when connecting the user. This will eventually cause an error in the sidekick. In order to prevent this, you need to reconnect the user, by clicking the disconnect button then connect it again.\n\n5. Configure the fstab.yaml\n\nThe last step is to configure the mountpoint in the fstab.yaml to point to the website root. It usually has the form of\n\nhttps://<tenant>.sharepoint.com/sites/<sp-site>/Shared%20Documents/website\n\nBut this might vary depending on how you create the sharepoint site and lists. In order to obtain the url, the simplest way is to copy-past the first part from the browser address, eg:\n\n\n\nAnd then add the rest manually (Note, that copying the sharelink via the UI adds unnecessary information and it is better to use a canonical representation of the url). Once you composed the url, you can test it by entering it again in the browser. You should end up in the folder view of your website root.\n\nAfter that, update the fstab.yaml accordingly. For example:\n\nmountpoints:\n  /:\n    https://adobeenterprisesupportaem.sharepoint.com/sites/hlx-test-project/Shared%20Documents/website\n\n\nTo finalize the setup, commit the fstab.yaml back to the main branch. Don’t forget to publish the page you want to see live.","lastModified":"1679561471"},{"path":"/docs/custom-headers","title":"Custom HTTP Response Headers","image":"/docs/media_1a6c1815c3475adea695bf60d8c483e49c618f473.png?width=1200&format=pjpg&optimize=medium","description":"In some cases, it is useful to apply custom HTTP response headers to resources, for example to allow CORS. If you want to specify headers, ...","content":"Custom HTTP Response Headers\n\nIn some cases, it is useful to apply custom HTTP response headers to resources, for example to allow CORS. If you want to specify headers, create either an Excel Workbook or a Google Sheets Workbook in the /.helix folder of your website in Sharepoint or Google Drive called headers.xlsx in SharePoint or headers in Google Drive.\n\nThe workbook should have only one worksheet and at least two columns.\n\nThe first column, titled URL has the URL pattern of the pages that should get a particular headers.\n\nThe wildcard * can be used as a prefix or suffix, allowing for flexible matches on the URL pathname. Typical examples include /docs/** or **/docs/**.\n\nFor each header, create a column in the worksheet and naming it with the header you want to assign. Typical examples include access-control-allow-origin, x-frame-options, or content-disposition\n\nAfter you update the sheet, you need to preview it. Note that the headers are applied to the preview and live versions of the page. You might need to purge the live or production cache for the change to take effect. See the Franklin Admin API documentation for more information.","lastModified":"1675929985"},{"path":"/docs/byo-cdn-cloudflare","title":"Cloudflare Setup","image":"/docs/media_13d06c2eddba394e68156f5f33d19c9b212285f23.png?width=1200&format=pjpg&optimize=medium","description":"The following screenshots illustrate how to configure Cloudflare to deliver Helix content. Essential settings are marked with a red circle.","content":"Cloudflare Setup\n \n\nThe following screenshots illustrate how to configure Cloudflare to deliver Helix content. Essential settings are marked with a red circle.\n\n \nCreate a Cloudflare site\n \n\n     \n\n \n\nEnter the domain:\n\n \n\n     \n\n \n\nSelect a plan:\n\n \n\n     \n\n \n\nNote that surgical push invalidations are only supported on the Enterprise plan. On all other plans the entire cache of the site will be purged every time an author publishes a content change. See Configuring push invalidation\n\n \n\nFor this walk-through we’ll use the Free plan.\n\n \nDNS Setup\n \n\nWe’ll skip the DNS setup step as this would be beyond the scope of this simple walk-through.\n\n \nCreate Page Rule\n \n\n     \n\n \n\n     \n\n \nCreate Worker\n \n\n     \n\n \n\n     \n\n \n\nChoose a worker plan, we’ll go with the Free plan. Then create a service.\n\n \n\n     \n\n \n\n     \n\n \n\nReplace the worker code with:\n\n \n// Origin: helix .live site (NEEDS TO BE ADAPTED)\nconst ORIGIN_HOSTNAME = 'main--mysite--hlxsites.hlx.live';\n\naddEventListener('fetch', (event) => {\n  return event.respondWith(handleEvent(event));\n});\n\nconst handleEvent = async (event) => {\n  const url = new URL(event.request.url);\n  url.hostname = ORIGIN_HOSTNAME;\n  const req = new Request(url, event.request);\n  req.headers.set('x-forwarded-host', req.headers.get('host'));\n  // set the following header if push invalidation is configured\n  // (see https://www.hlx.live/docs/setup-byo-cdn-push-invalidation#cloudflare)\n  req.headers.set('x-push-invalidation', 'enabled');\n  let resp = await fetch(req, {\n    cf: {\n      // cf doesn't cache html by default: need to override the default behavior\n      cacheEverything: true,\n    },\n  });\n  resp = new Response(resp.body, resp);\n  resp.headers.delete('age');\n  resp.headers.delete('x-robots-tag');\n  return resp;\n};\n\n \n\nMake sure you adapt the value of the ORIGIN_HOSTNAME variable to point to the correct Helix origin.\n\n \n\n     \n\n \n\nAdd a route:\n\n \n\n     \n\n \n\n     \n\n \n\nThat’s all (more or less).","lastModified":"1653482295"},{"path":"/docs/understanding-blocks","title":"Understanding blocks","image":"/docs/media_1203719cf8684ba910ab67f71e7ed3a7c28b171e9.png?width=1200&format=pjpg&optimize=medium","description":"Blocks are a foundational concept behind adding form and function to sections of a page. If you followed along with the tutorial, you will know ...","content":"Understanding blocks\n \nIntroduction\n \n\nBlocks are a foundational concept behind adding form and function to sections of a page. If you followed along with the tutorial, you will know that you can create simple content structures with just text and images. When you want to group pieces of content, add a bit more structure, or add more complex functionality, blocks can help you achieve these goals.\n\n \nExample blocks ideas\n \n\nA block can really be anything you choose, but here are a few possible use cases:\n\n \nHero Navigation Accordion Carousel Tab List\n \nHow they work\n \n\nBlocks are built using tables in Google Docs or Microsoft Word. These tables are converted to Markdown and rendered as simple divs when requesting HTML.\n\n \n\nTo create a block, you only need a table with at least one row & one column:\n      \nThis will output in HTML as:\nhttps://gist.github.com/auniverseaway/11fd8e0d00038872e77c5f2e4ee9b1f1\n\n \n\nIn order to give some context to our block, we will add a name to the first row + column:\n      \nThis will output in HTML as:\nhttps://gist.github.com/auniverseaway/280d80aef8c1a5a2937874933d84f9d5\n\n \n\nWe now have a CSS class that we can use to either style our block or attach functionality with Javascript. Of course, an empty div with a class is not tremendously useful.\n\n \n\nLet’s add a bit of content using additional rows and columns:\n\n \n\n     \n\n \n\nEach accordion item will have a header with an image and text sitting below. I could have made this content a little simpler by joining the image and text columns, but I want to highlight a few important areas with how the HTML is rendered from this table. Let’s look at the markup:\n\n \n\nhttps://gist.github.com/auniverseaway/21b2db5b928b6014e9a5a485780038c4\n\n \n\nAs we saw before, we have a div with a class representing the entire table. There are a few other notable additions:\n\n \nEvery row after the first is represented by a div (Line 2). Every column is also represented by a div (Line 7). If you have multiple columns, but have merged cells, you will get an empty div (Line 4).\n \n\nOnce you have created this structure in your document, you will want to decorate and style it.\n\n \nDecorating blocks\n \n\nThe concept of decorating blocks is to perform several optional tasks:\n\n \nAdd additional classes or IDs to your markup. Add any semantic elements you may want. Add any aria or accessibility attributes you need. Manipulate the DOM in a way to match your desired output.\n \n\nFor our use case, we’ll decorate the block to add a few classes to help with styling and an event handler for interactivity:\nhttps://gist.github.com/auniverseaway/8e9d73d7df4e26abef151a9be390ccb6\n\n \n\nLet’s also add some CSS:\nhttps://gist.github.com/auniverseaway/a95567f5ff633b7803710d46c002f9ff\n\n \n\nThe end result should look something a bit like this:\n\n \nGuatemala Huehuetenango Finca Rosma\n \n \n     \n \nA flavor compound of dark sugars, oatmeal-raisin cookies, a faint blackberry accent note and acidic impression.\n \nEthiopia Dry Process Dari Kidame\n \n \n     \n \nFruits are well-integrated into the coffee's sweetness, and acidity is bright for a dry process. Date sugar, orange marmalade, mango, and aromatic cedar. Intense chocolate and a blueberry hint in this dark roast.\n \nColombia Buesaco Alianza Granjeros\n \n \n     \n \nRaw demurara sugar sweetness, aromatic butterscotch, hints of apple, golden raisin, orange peel, and elegant citrus acidic impression. Full City adds in a ribbon of cacao/chocolate bar, rich bittersweetness. Good for espresso.\n \nConclusion\n \n\nAnd that’s it! You’ve taken a simple table in Docs or Word and made it a much more rich experience for your visitors.","lastModified":"1653482295"},{"path":"/docs/authentication-setup","title":"Configuring Site Authentication","image":"/docs/media_16c339dc2ec9d208c5e009870f7a3607e8155a789.png?width=1200&format=pjpg&optimize=medium","description":"Learn how to enable authentication on a Franklin site.","content":"Configuring Site Authentication\n\nFranklin supports out-of-the-box authentication using the Microsoft Identity Provider (IDP) and Microsoft accounts. Your Franklin site acts as an application to which the administrator of your Microsoft organization will need to grant access.\n\nWarning\n\nIf you use authentication, your BYO (production) CDN must not use (disable) caching, otherwise authentication is gradually circumvented.\n\nLimitations\nOnly authentication is supported. Authorization is not yet supported. Authentication can only be enabled or disabled for the entire site It is not possible to create a custom error page for denied access after login Static resources of your site (e.g. CSS, JS, …) are not subject to authentication\nEnable Authentication\n\nIn order to enable authentication, it is sufficient to add relevant access-statements to your site configuration. Upon encountering said access-statements, Franklin will automatically configure your site to redirect to the Microsoft IDP for authentication.\n\nStep 1: Create Configuration\n\nIf not present already, create your site configuration file:\n\nIn your site’s root folder create a folder named .helix Go to the folder named .helix Create a new spreadsheet with name:\nOn sharepoint: config.xlsx On GDrive: config\nName the first column header key Name the second column header value\nStep 2: Add Access Allow To Configuration\n\nOpen your site configuration file, located in your site root folder: .helix/config.xslx (on Sharepoint) or .helix/config (on GDrive).\n\nAdd access.allow key/value pairs as rows to your configuration sheet for each individual user or wildcard-domain you’d like to give access to the site for.\n\nExample for an individual user: access.allow = some.user@adobe.com\n\nExample for a wildcard domain: access.allow = *@adobe.com\n\nThe following example would grant access to the site for all users within the “example.com” domain and the single user “some.user@adobe.com”:\n\nStep 3: Activate Your Configuration\n\nIf you haven’t done so already, install the Sidekick Extension.\n\nWith the site configuration sheet still open, click the Sidekick’s “Preview Button”:\n\nThis will copy your site configuration to both the preview and live stages of Franklin, since configuration values are treated global. Authentication, by virtue of the access.allow statements you added in the previous step, should now be automatically enabled on your site.\n\nGo to your site’s preview URL (https://main–<repo>--<owner>.hlx.page) or live URL (https://main–<repo>--<owner>.hlx.live). You should be redirected to the Microsoft Sign In page:\n\nSign in with a user covered by the access.allow statements.\n\nIf this is the first time this Franklin site is used in conjunction with a Microsoft Login for your account or domain, the IDP will ask to give permissions to the Franklin Application. Depending on your setup, an administrator may need to grant those permissions.\n\nAfter login, you should be redirected to and see your site.\n\nFAQ\nQ: I have published the configuration limiting access to my site, but I can still see the index page without login, whereas sub-paths are protected.\nA: This is most likely a caching issue. You can resolve it by publishing the index document (e.g. index.docx) again.\nConfiguring Admin Authentication\nEnable Authentication\n\nIn order to enable authentication, it is sufficient to add relevant access-statements to your site configuration. Upon encountering said access-statements, the Sidekick will enforce authentication with the respective provider: Microsoft for Sharepoint based projects, and Google for GDrive based projects.\n\nStep 1: Create Configuration\n\nIf not present already, create your site configuration file:\n\nIn your site’s root folder create a folder named .helix Go to the folder named .helix Create a new spreadsheet with name:\nOn sharepoint: config.xlsx On GDrive: config\nName the first column header key Name the second column header value\nStep 2: Add Access Allow To Configuration\n\nOpen your site configuration file, located in your site root folder: .helix/config.xslx (on Sharepoint) or .helix/config (on GDrive).\n\nAdd admin.role.author and or admin.role.publish key/value pairs as rows to your configuration sheet for each individual user or wildcard-domain you’d like to give access to the site for.\n\nExample for an individual user: admin.role.publish = some.user@adobe.com\n\nExample for a wildcard domain: admin.role.author = *@adobe.com\n\nThe following example would grant author access all users within the “example.com” domain and publish rights to a the single user “some.user@adobe.com”:\n\nStep 3: Activate Your Configuration\n\nIf you haven’t done so already, install the Sidekick Extension.\n\nWith the site configuration sheet still open, click the Sidekick’s “Preview Button”:\n\nThis will copy your site configuration to both the preview and live stages of Franklin, since configuration values are treated global.\n\nStep 4: Login via Sidekick\n\nThe next time the Sidekick opens on a document, it will show a Sign In option:\n\nOnce you click it, it will open a new browser tab, redirecting to your respective provider:\n\nThe first time, it will ask for consent that the Franklin Admin service can access your sharepoint or google data. In case you are not admin on the account, you see a the following message:\n\nIn this case, ask an Active Directory admin of your organization to login via Sidekick or directly via the admin link: https://admin.hlx.page/auth/microsoft\n\nThey should see the following:\n\nThe admin can either grant consent directly by checking the ‘Consent on behalf of your organisation’ when they log in, or later via the Azure Portal.\n\nStep 5: Granting Admin Consent via Azure Portal\n\nIn order to grant admin consent, open the azure portal and go to:\n\nHome -> Active Directory -> Enterprise Application s\n\nSearch for the Franklin Admin:\n\nIt should have the application id shown above.\n\nSelect the Permissions tab (below security):\n\nAnd click on Grant admin consent for {your organisation}.\n\nAfter clicking Accept you can refresh the Permissions blade a few times, until the consented permissions show up:\n\nNow, the non admin user should be able to login:","lastModified":"1678901536"},{"path":"/developer/franklin-video-series","title":"Adobe Franklin Developer Starter Series","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"Get up-and-running with your AEM Franklin project in less than 30 minutes with this four-episode short-form video tutorial series. You will be able to create, ...","content":"Adobe Franklin Developer Starter Series\nGoal : Get started quickly with Adobe Franklin\n\nGet up-and-running with your AEM Franklin project in less than 30 minutes with this four-episode short-form video tutorial series. You will be able to create, preview, and publish your own content, as well as create your styling and add new blocks.\n\nEpisode 1 | Episode 2 | Episode 3 | Episode 4\n\nFranklin Getting Started Episode #1\n\nIn this video, you will learn:\n\nPrerequisites for getting started with Franklin How to use the Franklin Boilerplate template How to share your new repository with the Franklin (Helix) Bot\n\nWith this knowledge you will see the website in action running on Franklin with sample content.\n\nhttps://smartimaging.scene7.com/is/content/DynamicMediaNA/franklinonboarding/FranklinOnboardingEpisode15.mp4\nVideo links:\nFranklin Boilerplate on GitHub (2:15) Franklin (Helix) Bot (3:30)\nVideo Resources:\nFranklin home Text based training:\nFranklin developer tutorial site\nThe Anatomy of a Franklin Project Markup, Sections, Blocks\n\nBack to top\n\nStyle\nseparator\nFranklin Getting Started Episode #2\n\nIn this video, you will learn how to:\n\nConfigure your custom content source using Google Drive Share content with Franklin (Helix) Bot\nhttps://smartimaging.scene7.com/is/content/DynamicMediaNA/franklinonboarding/FranklinOnboardingEpisode25.mp4\nVideo links:\nFranklin Sample Content (0:45) Use Sharepoint as content source (4:25)\nVideo Resources:\nThe Anatomy of a Franklin Project Share with the Franklin (Helix) Bot:\nhelix@adobe.com\n\nBack to top\n\nStyle\nseparator\nFranklin Getting Started Episode #3\n\nIn this video, you will learn how to:\n\nInstall the Sidekick Preview and publish content using the Sidekick Copy a site into Franklin\nhttps://smartimaging.scene7.com/is/content/DynamicMediaNA/franklinonboarding/FranklinOnboardingEpisode35.mp4\nVideo links:\nSidekick Chrome extension (1:10) WKND site (3:45)\nVideo Resources:\nSidekick Configurator Authoring and Publishing Content\n\nBack to top\n\nStyle\nseparator\nFranklin Getting Started Episode #4\n\nIn this video, you will get an introduction to:\n\nFranklin blocks Setting up a local development environment\nhttps://smartimaging.scene7.com/is/content/DynamicMediaNA/franklinonboarding/FranklinOnboardingEpisode45.mp4\nVideo links:\nConfigure GIT Repo with Visual Code (2:22) Install Node JS (1:22)\nVideo Resources:\nWKND site Markup, Sections, Blocks NodeJS Visual Studio Code Configure MS Code with GIT (2:22) Terminal Command to install Franklin CLI:\nnpm install –g @adobe/helix-cli\n\nBack to top\n\nStyle\nseparator\n\nThat’s it, you made it! Congrats, your first Franklin site is up and running.\n\nReady for the next step in your developer journey? Check out the Franklin Video Series Developer Fundamentals tutorial section.","lastModified":"1678697707"},{"path":"/developer/franklin-video-series-sharepoint-setup","title":"Franklin Basics Episode 2 Addendum","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"","content":"Franklin Basics Episode 2 Addendum\n \nConfigure your custom content source via Sharepoint\n \n\nIn this video, you will learn:\n\n \nCreating the Web Site Root Folder in Sharepoint Share the website folder with the Technical User Configure the FSTAB.yaml file\n \nhttps://smartimaging.scene7.com/is/content/DynamicMediaNA/franklinonboarding/FranklinOnboardingEpisode55.mp4\n \nVideo Resources:\n \nHow to use Sharepoint with Franklin (0:10) The Anatomy of a Franklin Project Markup, Sections, Blocks\n \n\nBack to Franklin Video Series\n\n \nStyle\n \nseparator","lastModified":"1669818818"},{"path":"/developer/franklin-video-series-advanced","title":"Franklin Developer Fundamentals Tutorials","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"","content":"Franklin Developer Fundamentals Tutorials\nAEM Franklin Developer Fundamentals: Episode 1\n\nIn this video, you will learn:\n\nExploring the structure of a Franklin project Building a custom Block\nhttps://smartimaging.scene7.com/is/content/DynamicMediaNA/franklinonboarding/Episode1_DeveloperFundamentals.mp4\nVideo Resources:\nThe Anatomy of a Franklin Project Markup, Sections, Blocks\n\nBack to Franklin Video Series\n\nStyle\nseparator","lastModified":"1671561747"},{"path":"/developer/franklin-video-series-git-repo-setup","title":"Franklin Basics Episode 4 Addendum","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"","content":"Franklin Basics Episode 4 Addendum\n \nConfigure MS Visual Code to work with your GIT Repo.\n \n\nIn this video, you will learn:\n\n \nHow to configure your GIT repo locally Access your repo from MS Visual Code\n \nhttps://smartimaging.scene7.com/is/content/DynamicMediaNA/franklinonboarding/FranklinAddendumEpisode2_2.mp4\n \nVideo Resources:\n \nDeveloper Tutorial The Anatomy of a Franklin Project Terminal Command to set username and password git config user.name = \"user\"\n \n\ngit config user.password = \"password\"\n\n \n\nBack to Franklin Video Series\n\n \nStyle\n \nseparator","lastModified":"1670625114"},{"path":"/developer/franklin-video-series-install-node","title":"Franklin Basics Episode 4 Addendum","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"","content":"Franklin Basics Episode 4 Addendum\n \nInstall Node JS on your system\n \n\nIn this video, you will learn:\n\n \nHow to install Node JS on your system How to test the installation of Node JS\n \nhttps://smartimaging.scene7.com/is/content/DynamicMediaNA/franklinonboarding/FranklinAddendumEpisode3.mp4\n \nVideo Resources:\n \nNode JS Download\n \nOptions for installing node via package managers i.e. homebrew https://nodejs.org/en/download/package-manager/\n \nTerminal Command to test install of node node -v\n \n\nBack to Franklin Video Series\n\n \nStyle\n \nseparator","lastModified":"1670965520"},{"path":"/developer/font-fallback","title":"Font Fallback and CLS","image":"/developer/media_1eed5080c1fcf089c11c2151415addc236e5f277f.png?width=1200&format=pjpg&optimize=medium","description":"Learn how to create a font fallback","content":"Font Fallback and CLS\n \n\n…in the context of Core Web Vitals\n\n \n\nLoading a custom font (a font which is not known by default by all browsers) can easily introduce some delays in the loading sequence and a CLS (Cumulative Layout Shift) problem. This is true for the first page load on your site, until the font is cached by the browser.\n\n \n\nYou can try to preload and/or push the custom font, but there will always be a time where the browser will render the body with a default font. This is especially true on slow devices or on a slow connection. You can hide the full body until the font is loaded, but then the FCP (First Contentful Paint) and LCP (Largest Contentful Paint) scores will be highly penalized.\n\n \n\nYou can also use CSS tricks like font-display: optional, but the font might not be loaded at all on a slow connection: the browser has the instruction to ignore it after a certain (short) delay.\n\n \n\nThis last solution does not prevent the CLS score to be impacted: when swapping the font, the size of the content might change, and layout might “shift”.\n\n \n\nThere is another mechanism that can be used to prevent those 2 issues (font loading delay and CLS): use a font fallback.\n\n \n\nThe idea of the font fallback is to scale a browser default font so that when applied to the content of a page, the content takes up the same \"space\" with the font fallback and with the custom font. Like this, you can swap one with the other without a layout shift. If you use a default font that looks “similar” enough to the custom font, those few milliseconds of first-time page load will look really close to the experience you want to provide with the custom font. You can then defer the custom font loading or at least make it non-blocking in the loading sequence.\n\n \nThe font-fallback extension\n \n\nWe have built a chrome extension to help compute the font fallback.\n\n \n\n     \n\n \n\nWhen you open the extension on a page, it analyzes the font faces in use on that page: a font face is a combination of font family and font weight. Now for each of those font faces, you can select a default browser font and run the font fallback computation. For each font face, the extension computes which size-adjustment of the default browser font is required so that the content has the same width with both fonts.\nThe computation happens only on the width because the height should be controlled by the line-height: you should set a line-height on your site to not let the font decide what the height of the text is. This is true for paragraphs, headings, lists…\n\nNote: with font kits, there is a tendency to load many font faces that are never used (or used somewhere else on the site than on the current page). The extension shows also how many are loaded in total. It is also a good indicator if some optimization can be done: optimize the font kit by reducing the font faces it delivers, you can save a lot of bytes to transfer!\n\n \n\n     \n\nOnce the computation work is done, you can copy the computed CSS and paste it in your main CSS.\n\n \n\nThe generated font families must be added after the custom font in your CSS font-family: the browser will initially not find the custom font, use the fallback until, later, the custom font is loaded. Since they use the same space, the swap does not generate CLS!\n\n \n\n     \n\n \n\nTo fine tune the font adjust value, you can also use the simulation panel.\n\n \n\n     \n\n \n\nChecking the box replaces the custom font by the computed fallback font directly in the page. The text input allows you to change the size-adjust value and immediately visualize the result (you need to toggle the checkbox each time you change the value).\n\n \nEdge cases\n \n\nThe extension makes a calculation based on an existing site, with existing content and CSS rules. In a different context, the size-adjust may not fit perfectly and the font swap may still produce CLS:\n\n \nContent dependency: the text iiiii has a smaller width than mmmmm for the same number of characters. The number of m in the text has a bigger influence on the width. But you can find a size-adjust that matches the average text by running the extension on multiple pages and taking an average of the size-adjust. Small container: if your text is in a small container (especially true on mobile) with a restricted width and height, the space allowed to the text is then limited and the computation of the fallback might need to be more precise, i.e. made on this exact text.\n \n\nYou will find more technical details and other tools directly In the extension repository: https://github.com/adobe/helix-font-fallback-extension","lastModified":"1671789719"},{"path":"/developer/franklin-importer","title":"Importing Content","image":"/developer/media_1856c8048323c7361461e0d983c2baca65d62f3c2.png?width=1200&format=pjpg&optimize=medium","description":"Learn how to use the Franklin importer","content":"Importing Content\n\nFranklin offers the capability to easily import an existing site and convert its content to docx files.\n\nImport Concept\n\nIf you copy the content of a web page by selecting Select All and Copy in the browser and paste the selection inside a Word or a Google Doc document, you will see that both programs can easily convert the copied DOM elements into their own basic document elements. An HTML h1 becomes text styled with Heading 1. Any span, div, or p element becomes a Normal paragraph. An image is inserted as an image. Etc.\n\nImporting content with Franklin follows the same pattern and offers the tooling to automate the process for multiple pages of a site to be imported and converted into Word documents.\n\nYou start from an existing web page (the DOM is the input). You apply a set of transformations (to remove unnecessary elements, reorder or transform some of the elements, perform cleanup, etc.). The importer creates a docx document for you.\n\nFor the importer, it does not matter if you work with Word documents on Sharepoint or Google Docs on Drive. The output of the Franklin Importer is always docx file(s). Google Drive has an option to automatically convert the docx files (Settings > General > Convert uploads). When you upload the files to your drive, they will be converted automatically.\n\nCheck the Convert uploaded files to Google Docs editor format checkbox\n\nWhere to Start\n\nWhile the content import is one of the first steps to be performed in a project, you need to be familiar with Franklin, especially the desired structure of a Word or a Google Doc document.\n\nIt is good practice to make examples of each page type you wish to import by creating manual imports using copy/paste. You can thereby confirm that the authors find the resulting structures intuitive. This also allows parallelization of the content import with the development work for blocks and styling.\n\nStructuring your content inside the documents in an intuitive manner is an important step in a Franklin project. See the documents Markup, Sections, Blocks and Auto Blocking and David’s Model, Second take for more information.\n\nA project is usually ready for an import roughly at the end of the tutorial. See the document Getting Started with Franklin - Developer Tutorial for more information.\n\nAt the end of the tutorial, you can simply run the following command.\n\nhlx import\n\nThis starts the Franklin Importer. You can run this instead of or in addition to hlx up. The helix-importer-ui project will be cloned under the tools/importer/helix-importer-ui folder. The import proxy server starts and a new browser window opens at http://localhost:3001/tools/importer/helix-importer-ui/index.html\n\nThe Franklin Importer\n\nThe Franklin Importer\n\nThe Franklin Importer offers a set of tools to support you to quickly import your website content.\n\nPlease note that only Chrome-based browsers are supported.\n\nImport - Workbench\n\nThe Import Workbench is where you define and start your import process.\n\nThe first step is to provide a URL (https://wknd.site/us/en.html in our sample case) and click the Import button. The importer triggers the browser to ask you where you want to save the resulting docx file and for confirmation that the browser is allowed to read and write to that location. Once you confirm this, the import is performed.\n\nA green banner at the bottom of the window will confirm a successful import. A red banner will report any errors.\n\n\nPreview the import result\n\nThe Page preview frame in the middle shows you the page you are importing. The page is loaded in an iframe and served via the local proxy server. While Franklin tries to remove all security settings, it is possible that the page does not fully render like the original due to CORS issues. This is usually fine in 90% of the cases. In the remaining cases, there are different solutions that can be attempted such as starting your browser with disabled security settings. Please contact the Franklin team for assistance in such cases.\n\nThe Preview panel shows you a result which is an approximation of how the Word document will appear.\n\nThe Franklin Importer transforms the HTML into markdown as a first step and then the markdown into a docx file. The Markdown tab shows you the markdown from that intermediate step.\n\n\nCheck the Markdown source\n\nThe HTML tab shows the result of the first step of the transformation. It is the result of the DOM manipulation. This tab can be occasionally useful but can be disregarded the majority of the time.\n\n\nCheck the HTML source\n\nBy default, the Franklin Importer performs a few things for you automatically, like removing the head and cleaning up the HTML.\n\nTo further customize the import process, you can create a tools/importer/import.js file. This file defines all of your own rules to convert your content. If you change and save the import.js file, the import is automatically re-executed. In this way, you can preview your changes while you are developing the transformation rules.\n\nSee the GitHub documentation for the importer to learn more and review code snippets to create your own import.js. Note that any rules you add to your own import.js file are in addition to the default behavior of the importer.\n\n\nFinalized import\n\nWith a set of rules (such as to remove header and footer, reorganize the hero section, create blocks, insert metadata, etc.), you can create an import document that contains the essential content of the page and that fits perfectly in a Word document.\n\nThe import process has additional options which may be useful for your own import. Learn more in the GitHub documentation of the importer.\n\nImport - Bulk\n\nOnce you are satisfied with the transformation and you have individually tested one or more files, you likely will need to bulk import many more. The Import - Bulk tool works nearly the same as the Import - Workbench tool with a few minor differences.\n\nProvide a list of URLs instead of one. Simply paste the list of URLs to import with one URL per line. The import.js file is not automatically reloaded as it is for one-off imports since if you are in the middle of importing 1000 URLs, you probably do not want the process to restart if you change the code.\n\nOtherwise the options are the same for importing one page or performing a bulk import.\n\nThe amount of URLs you can import varies mainly based on the memory each page consumes. For example, a heavy SPA page usually does not release memory and the browser tends to crash (between 60 and 100 pages). In such situations, if you only need information which is in the markup, you can disable Javascript execution in the options and you will be able to import many more pages.\n\nYou can still batch the set of URLs to import if the number is still manually manageable. If you have a lot of URLs to import (10k+), contact the Franklin team. There are several ways to automate the process without using a browser, which you can discuss with them.\n\nReport\n\nDuring the process, you can download an Excel report with the list of pages imported and some process information (import success, 404, 301, etc.). At the end of the process, this report file contains everything the importer has done and can be used for further analysis such as to find pages with errors. Or it can be used for page processing such as previewing and publishing.\n\nBulk import\n\nCrawl\n\nIf you are importing pages from a website and you do not have the full list of URLs to import, you can use the Crawl tool to build the list based on the sitemap or by crawling the site.\n\nCrawl tool\n\nGet from robots.txt or sitemap\n\nAfter providing a hostname and clicking Get from robots.txt or sitemap, the tool will first try to find sitemaps in the /robots.txt file. If no robots.txt is found, it will try the /sitemap.xml file (the default filename to search can be changed in the options).\n\nIf it finds a sitemap, it will collect all the URLs referenced in the siteamp and recursively follow the referenced other sitemap files. When the crawl is complete, you can use the download report button for the list of all unique URLs found.\n\n\nSitemaps extracted URLs\n\nYou can use the Filter pathname option to only output the URLs under a certain path. The tool will still need to fetch all the URLs from all the sitemaps.\n\nCrawl\n\nAfter providing a URL and clicking Crawl, the tool will open the provided URL, try to identify the links on the page, and recursively visit all those links that are on the same host. It is basically navigating the site and collecting all the URLs it finds. For a large website, it can take a lot of time. If the website consumes a lot of resources / memory, it may even crash the browser. In such cases, hiding the preview and/or disabling the Javascript in the options can help.\n\n\nCrawling in-progress\n\nYou can use the Filter pathname option to only crawl URLs under a certain path. The provided URLs must then match this filter. This can be really useful to only crawl a subset of a large site.\n\nEyedropper\n\nThe Eyedropper tool allows you to capture the logo and some of the key CSS information of a website. You just need to provide a URL and click Eyedrop.\n\n\nCaptured logo\n\n\nCaptured colors\n\n\nCaptured fonts and sizes\n\nClicking the Copy CSS to clipboard button copies all gathered information in a CSS format that is ready to be pasted into your Franklin CSS for further testing and customization.\n\nThis tool is a prototype and extracting the correct information is not straightforward. You need to review the output and adapt it to your project needs.","lastModified":"1675265265"},{"path":"/developer/block-collection/table","title":"Tables","image":"/developer/block-collection/media_1dede4c0b32503a8e62243c67d711ef1d665f2bfb.png?width=1200&format=pjpg&optimize=medium","description":"A table is a way to organize tabular data into rows and columns. It can help users quickly find relationships between different types of information ...","content":"Tables\nNotes:\n\nA table is a way to organize tabular data into rows and columns. It can help users quickly find relationships between different types of information and can be accessible to people who use screen readers, making them useful for both sighted and visually impaired users.\n\nThis Franklin table block supports tables with one header row, where the header cell is associated with the corresponding data cells in the same column.\n\nExample:\n\nSee Live output\n\nContent Structure:\n\nSee Content in Document\n\nCode:\n\nThis code is included in Helix Block Collection, simply copying the .css file and the .js file will add this block to your project.\n\nBlock Code","lastModified":"1673024183"},{"path":"/docs/rum","title":"Real User Monitoring (RUM)","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"Franklin uses Real User Monitoring (RUM) to understand how visitors are interacting with Franklin-powered sites, to diagnose performance issues, and to measure the effectiveness of ...","content":"Real User Monitoring (RUM)\n\nFranklin uses Real User Monitoring (RUM) to understand how visitors are interacting with Franklin-powered sites, to diagnose performance issues, and to measure the effectiveness of experiments. RUM preserves the privacy of visitors through sampling (only a small portion of all page views will be monitored) and judicious exclusion of all personally identifiable information (PII).\n\nRUM and Privacy\n\nReal User Monitoring in Franklin is designed to preserve visitor privacy and minimize data collection. As a visitor, this means that no personal information will be collected by the site you are visiting or made available to Adobe. As a site operator, this means no opt-in is required to enable this feature.\n\nRUM data is sampled\n\nTraditional web analytics solutions try to collect every single visitor. Franklin’s Real User Monitoring only captures information from a small fraction of page views. Under normal circumstances this is one out of one hundred visitors, although site operators can decide to increase or decrease this number.\n\nAs the decision if data will be collected is made on a page view by page view basis, it becomes virtually impossible to track interactions across multiple pages. RUM has no concept of visits, visitors, or sessions, only of page views. This is by design.\n\nWhat data is being collected\n\nRUM is designed to prevent the collection of personally identifiable information. The full set of information that can be collected by Franklin’s Real User Monitoring is:\n\nThe host name of the site being visited, such as www.hlx.live The host name of the server responsible for the data collection such as rum.hlx.live The user agent (technical name of the browser) that is used to display the page such as Mozilla/5.0 (iPhone; CPU iPhone OS 14_4_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.3 Mobile/15E148 Safari/604.1 The time of the data collection such as 2021-06-26 06:03:42.596000 UTC The URL of the page being visited, such as https://www.hlx.live/docs/rum The Referrer URL (the URL of the page that linked to the current page, if the user followed a link) such as https://www.hlx.live/docs A randomly generated ID of the page view such as -1613679-1624687422539-9c095a7b2a9c6 The weight or inverse of the sampling rate such as 100 (this means only one in one hundred page views will be recorded) The version number of the code running in the browser that is responsible for collecting the data such as generation-1 The checkpoint, or name of a particular event in the sequence of loading the page or interacting with it as a visitor such as viewmedia (this particular checkpoint is fired when an image becomes at least 25% visible in the browser) The source, or identifier of the DOM element that the user interacts with for the checkpoint mentioned above such as .images The target, or link to an external page or resource that the user interacts with for the checkpoint mentioned above such as https://blog.adobe.com/jp/publish/2022/06/29/media_162fb947c7219d0537cce36adf22315d64fb86e94.png?width=2000&format=webply&optimize=medium The Core Web Vitals (CWV) performance metrics Largest Contentful Paint (LCP), First Input Delay (FID), and Cumulative Layout Shift (CLS) that describe the visitor’s quality of experience\n\nNo other data is being collected.\n\nHow RUM data is being used\n\nAdobe uses Franklin RUM data for following purposes:\n\nTo identify and fix performance bottlenecks on customer sites To estimate the number of page views to customer sites To understand how Franklin interacts with other scripts (such as analytics, targeting, or external libraries) on the same page to increase compatibility To make insights and recommendations available to authors using the Franklin Slack Bot\nRUM for Developers\n\nWe have additional in-depth information for developers that want to use Franklin’s RUM data to optimize their own sites.","lastModified":"1674643225"},{"path":"/docs/byo-dns","title":"Custom domains without a custom CDN","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"The most common way of going live with a Franklin site is to use a custom Content Delivery Network (CDN). Our documentation provides instructions for ...","content":"Custom domains without a custom CDN\n\nThe most common way of going live with a Franklin site is to use a custom Content Delivery Network (CDN). Our documentation provides instructions for the most common CDN providers and through your Slack support channel, the Franklin team provides assistance.\n\nIf you do not have a CDN, we can provide you with assistance in setting up a custom domain without a CDN.\n\nPrerequisites and limitations\nYou must own the domain under which you want to serve your Franklin site You need to be able to make Domain Name System (DNS) changes to the domain name Franklin will provide you with a TLS certificate, and you do not have a choice in certificate authority to use You will be able to establish a redirect from https://example.com to https://www.example.com but all other redirects must happen through the redirects spreadsheet HTTPS is required and IPv6 is not supported\nBefore you go live\n\nReach out to the Franklin team in your dedicated Slack channel and tell them which domain (e.g. www.example.com) you want to use and which Franklin site (e.g. https://main–example–hlxsites.hlx.live) should be the content source.\n\nThe Franklin team will verify the request and tell you when you are ready for the next step. This will usually take a few hours and might take up to one business day.\n\nSetup push invalidation\n\nFranklin push invalidation automatically purges content on the managed CDN whenever an author publishes content changes.\n\nContent is purged by url and by cache tag/key.\n\nPush invalidation is enabled by adding specific properties to the project's configuration (an Excel workbook named .helix/config.xlsx in Sharepoint or a Google Sheet named .helix/config in Google Drive).\n\nConfiguration properties:\n\nkey\t value\t comment \n cdn.prod.host\t <Production Host>\t Host name of production site, e.g. www.example.com \n cdn.prod.type\t managed\t\n\nAfter making changes to the config sheet, preview it with the sidekick to activate the changes.\n\nAs you go live\n\nMake or request following DNS change:\n\nFor www.example.com set the CNAME DNS record to hlxcdn.adobeaemcloud.com Use a high time to live (TTL) of 3600 seconds (one hour) or more. This will increase the reliability of site delivery in case of a DNS outage\n\nIf you want to establish an automatic redirect from from https://example.com to https://www.example.com the following additional steps are required\n\nFor example.com set the A record to these four IP addresses: 151.101.2.117, 151.101.66.117, 151.101.130.117, and 151.101.194.117 If your DNS provider cannot support multiple IP addresses in an A record (e.g. GoDaddy), use any of the listed IP addresses. This will be a bit less reliable, but won’t matter Use the same high TTL as described above\n\nDepending on your existing DNS setup, these changes can take a few minutes to half a day to complete. If you have existing traffic on the site, make sure all redirects are in place.\n\nBetween the DNS change taking place and the certificate being issued, there may be a short (a few minutes) period where no HTTPS traffic can be served on the site, and the site will be unavailable for visitors. The Franklin team can help with a seamless transition, but this requires additional DNS records to be configured.\n\nIf you are looking for a timed launch, it is a good idea to create a temporary holding home page that will be replaced with the correct content at the desired launch time. As publishing in Franklin is fast and predictable, this will give you more control over the visibility of your content than relying on DNS.\n\nAfter you go live\n\nThe Franklin team will verify your setup and let you know if any problems arise.","lastModified":"1677501304"},{"path":"/developer/rum","title":"Developing Real User Monitoring in AEM","image":"/default-meta-image.png?width=1200&format=pjpg&optimize=medium","description":"AEM Franklin uses Real User Monitoring (RUM) to diagnose usage and performance of web sites running on Franklin. As a developer, you can use the ...","content":"Developing Real User Monitoring in AEM\n\nAEM Franklin uses Real User Monitoring (RUM) to diagnose usage and performance of web sites running on Franklin. As a developer, you can use the RUM APIs to track additional data about how visitors are experiencing your site.\n\nThis document describes the key concepts of Real User Monitoring, details the client-side APIs that you can use to send additional data to the RUM collection service and alludes to the fact that the data can be queried.\n\nKey Concepts\n\nEvery data point collected by RUM is made up of following key parts:\n\nid – a unique identifier, generated by the RUM library that identifies the current page view checkpoint – a named event in the sequence of loading the page, and interacting with the page source – identifies the DOM element that caused a particular user interaction (optional) target – identifies an external resource or link that is the subject of user interaction (optional)\nCheckpoints\n\nAs a developer, you can define your own checkpoints. By convention, checkpoint names are lowercase letters, without any special characters. The most common checkpoints used in Franklin projects are:\n\ntop – the page loading sequence has begun and first JavaScript code is being executed by the page. This event fires even before blocks are decorated or content is visible load – corresponds to the Window: load event in JavaScript and is fired when the whole page has loaded, including all dependent resources such as stylesheets, scripts, iframes, and images. cwv – indicates that either the page is ready to collect Core Web Vitals (CWV) readings or that either the LCP, CLS, or FID CWV reading has been recorded. As these readings are asynchronous, multiple of these checkpoints can be passed during one page view lazy – the page is ready for lazy loading of non-essential resources as part of the Lazy stage of the ELD cycle. lcp – the Largest Contentful Paint (LCP) has been made by the browser, this is usually the most prominent image on the page viewblock – a block has scrolled into view and there is a chance that the visitor has seen the content of that block. The class name of the block will be shared in the source property. viewmedia – an image or video has scrolled into view and there is a chance that the visitor has seen it. The URL of the image or video is shared in the target property. click – the visitor has clicked or tapped anywhere on the page, not just on links or buttons. If the element clicked is a link, then the link target is recorded in the target property. experiment – the visitor has been exposed to an experiment, which can be an A/B test or targeted content. error – a JavaScript error has occurred on the page and has not been handled by the application code. This usually indicates a bug. 404 – a 404, page not found page has been served. This checkpoint can indicate missing content or broken links unsupported – the page has been opened by a browser that does not support the more advanced RUM collection features. This checkpoint is fired by less than a tenth of a percent of all page views. There is also the related noscript checkpoint for browsers that do not have JavaScript enabled, which is even less common. search – a user has performed a site search on the page, typically using a search input field\nCollecting Data with RUM\n\nThe main way to collect data with RUM is to call the sampleRUM function by passing the name of a custom checkpoint. In the Project Boilerplate code, the delayed.js script provides a working example of this:\n\nimport { sampleRUM } from './lib-franklin.js';\n\nsampleRUM('cwv'); // replace this with your own checkpoint name\n\n\nIf you are in the scripts directory, you can use the import statement as above, in the blocks folder, you will need to adjust the path to ../../scripts/lib-franklin.js\n\nYou can perform more advanced RUM collection by passing an optional payload parameter to the sampleRUM function. This is a good idea when you want to track user interaction, so you would place the following code into an event handler function:\n\nconst eventhandler = (element) => {\n  // your normal event handler code here\n  sampleRUM(‘myevent’, {\n    source: sampleRUM.sourceselector(element),\n    target: sampleRUM.targetselector(element,\n  })\n};\n\n\nThe sampleRUM.sourceselector and sampleRUM.targetselector functions are convenience functions to determine good values for source and target based on a DOM element.\n\nQuerying RUM Data\n\nFranklin RUM data can be queried using a REST API that provides query results either in JSON or CSV format. Contact Adobe using your Slack channel if you are looking for particular answers, and we can provide you with a URL to consume the aggregated data.","lastModified":"1681290123"}],":type":"sheet"}
